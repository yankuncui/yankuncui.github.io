<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS常用函数大全</title>
      <link href="2021/09/13/JS%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/"/>
      <url>2021/09/13/JS%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="JS常用函数大全"><a href="#JS常用函数大全" class="headerlink" title="JS常用函数大全"></a>JS常用函数大全</h1><p>​        1.document.write(“”); 输出语句<br>　　2.JS中的注释为//<br>　　3.传统的HTML文档顺序是:document-&gt;html-&gt;(head,body)<br>　　4.一个浏览器窗口中的DOM顺序是:window-&gt;(navigator,screen,history,location,document)<br>　　5.得到表单中元素的名称和值:document.getElementById(“表单中元素的ID号”).name(或value)<br>　　6.一个小写转大写的JS: document.getElementById(“output”).value = document.getElementById(“input”).value.toUpperCase();<br>　　7.JS中的值类型:String,Number,Boolean,Null,Object,Function<br>　　8.JS中的字符型转换成数值型:parseInt(),parseFloat()<br>　　9.JS中的数字转换成字符型:(“”+变量)<br>　　10.JS中的取字符串长度是:(length)<br>　　11.JS中的字符与字符相连接使用+号.<br>　　12.JS中的比较操作符有:==等于,!=不等于,&gt;,&gt;=,&lt;.&lt;=<br>　　13.JS中声明变量使用:var来进行声明<br>　　14.JS中的判断语句结构:if(condition){}else{}<br>　　15.JS中的循环结构:for([initial e­xpression];[condition];[upadte e­xpression]) {inside loop}<br>　　16.循环中止的命令是:break<br>　　17.JS中的函数定义:function functionName([parameter],…){statement[s]}<br>　　18.当文件中出现多个form表单时.可以用document.forms[0],document.forms[1]来代替.<br>　　19.窗口:打开窗口window.open(), 关闭一个窗口:window.close(), 窗口本身:self<br>　　20.状态栏的设置:window.status=”字符”;<br>　　21.弹出提示信息:window.alert(“字符”);<br>　　22.弹出确认框:window.confirm();<br>　　23.弹出输入提示框:window.prompt();<br>　　24.指定当前显示链接的位置:window.location.href=”URL”<br>　　25.取出窗体中的所有表单的数量:document.forms.length<br>　　26.关闭文档的输出流:document.close();<br>　　27.字符串追加连接符:+=<br>　　28.创建一个文档元素:document.createElement(),document.createTextNode()<br>　　29.得到元素的方法:document.getElementById()<br>　　30.设置表单中所有文本型的成员的值为空:<br>　　var form = window.document.forms[0]<br>　　for (var i = 0; i&lt;form.elements.length;i++){<br>　　 if (form.elements[i].type == “text”){<br>　　 form.elements[i].value = “”;<br>　　 }<br>　　}<br>　　31.复选按钮在JS中判断是否选中:document.forms[0].checkThis.checked (checked属性代表为是否选中返回TRUE或FALSE)<br>　　32.单选按钮组(单选按钮的名称必须相同):取单选按钮组的长度document.forms[0].groupName.length<br>　　33.单选按钮组判断是否被选中也是用checked.<br>　　34.下拉列表框的值:document.forms[0].selectName.options[n].value (n有时用下拉列表框名称加上.selectedIndex来确定被选中的值)<br>　　35.字符串的定义:var myString = new String(“This is lightsword”);<br>　　36.字符串转成大写:string.toUpperCase(); 字符串转成小写:string.toLowerCase();<br>　　37.返回字符串2在字符串1中出现的位置:String1.indexOf(“String2”)!=-1则说明没找到.<br>　　38.取字符串中指定位置的一个字符:StringA.charAt(9);<br>　　39.取出字符串中指定起点和终点的子字符串:stringA.substring(2,6);<br>　　40.数学函数:Math.PI(返回圆周率),Math.SQRT2(返回开方),Math.max(value1,value2)返回两个数中的最在值,Math.pow(value1,10)返回value1的十次方,Math.round(value1)四舍五入函数,Math.floor(Math.random()*(n+1))返回随机数<br>　　41.定义日期型变量:var today = new Date();<br>　　42.日期函数列表:dateObj.getTime()得到时间,dateObj.getYear()得到年份,dateObj.getFullYear()得到四位的年份,dateObj.getMonth()得到月份,dateObj.getDate()得到日,dateObj.getDay()得到日期几,dateObj.getHours()得到小时,dateObj.getMinutes()得到分,dateObj.getSeconds()得到秒,dateObj.setTime(value)设置时间,dateObj.setYear(val)设置年,dateObj.setMonth(val)设置月,dateObj.setDate(val)设置日,dateObj.setDay(val)设置星期几,dateObj.setHours设置小时,dateObj.setMinutes(val)设置分,dateObj.setSeconds(val)设置秒 [注意:此日期时间从0开始计]<br>　　43.FRAME的表示方式: [window.]frames[n].ObjFuncVarName,frames[“frameName”].ObjFuncVarName,frameName.ObjFuncVarName<br>　　44.parent代表父亲对象,top代表最顶端对象<br>　　45.打开子窗口的父窗口为:opener<br>　　46.表示当前所属的位置:this<br>　　47.当在超链接中调用JS函数时用:(Javascript:)来开头后面加函数名<br>　　48.在老的浏览器中不执行此JS:<!-- //--><br>　　49.引用一个文件式的JS:<script type="text/Javascript" src="aaa.js"></script><br>　　50.指定在不支持脚本的浏览器显示的HTML:<noscript></noscript><br>　　51.当超链和ONCLICK事件都有时,则老版本的浏览器转向a.html,否则转向b.html.例:</p><pre><code>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;a.html&quot; onclick&#x3D;&quot;location.href&#x3D;&#39;b.html&#39;;return false&quot;&gt;dfsadf&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></code></pre><p>　　52.JS的内建对象有:Array,Boolean,Date,Error,EvalError,Function,Math,Number,Object,RangeError,ReferenceError,RegExp,String,SyntaxError,TypeError,URIError<br>　　53.JS中的换行:\n<br>　　54.窗口全屏大小:<script>function fullScreen(){ this.moveTo(0,0);this.outerWidth=screen.availWidth;this.outerHeight=screen.availHeight;}window.maximize=fullScreen;</script><br>　　55.JS中的all代表其下层的全部元素<br>　　56.JS中的焦点顺序:document.getElementByid(“表单元素”).tabIndex = 1<br>　　57.innerHTML的值是表单元素的值:如<p id="para">“how are <em>you</em>“</p>,则innerHTML的值就是:how are <em>you</em><br>　　58.innerTEXT的值和上面的一样,只不过不会把<em>这种标记显示出来.<br>　　59.contentEditable可设置元素是否可被修改,isContentEditable返回是否可修改的状态.<br>　　60.isDisabled判断是否为禁止状态.disabled设置禁止状态<br>　　61.length取得长度,返回整型数值<br>　　62.addBehavior()是一种JS调用的外部函数文件其扩展名为.htc<br>　　63.window.focus()使当前的窗口在所有窗口之前.<br>　　64.blur()指失去焦点.与FOCUS()相反.<br>　　65.select()指元素为选中状态.<br>　　66.防止用户对文本框中输入文本:onfocus=”this.blur()”<br>　　67.取出该元素在页面中出现的数量:document.all.tags(“div(或其它HTML标记符)”).length<br>　　68.JS中分为两种窗体输出:模态和非模态.window.showModaldialog(),window.showModeless()<br>　　69.状态栏文字的设置:window.status=’文字’,默认的状态栏文字设置:window.defaultStatus = ‘文字.’;<br>　　70.添加到收藏夹:external.AddFavorite(“地址”)<br>　　71.JS中遇到脚本错误时不做任何操作:window.onerror = doNothing; 指定错误句柄的语法为:window.onerror = handleError;<br>　　72.JS中指定当前打开窗口的父窗口:window.opener,支持opener.opener…的多重继续.　　</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax和Json</title>
      <link href="2021/09/09/Ajax%E5%92%8CJson/"/>
      <url>2021/09/09/Ajax%E5%92%8CJson/</url>
      
        <content type="html"><![CDATA[<h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>基本概念</strong></p><ul><li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li><li>JSON 是轻量级的文本数据交换格式</li><li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li><li>JSON 具有自我描述性，更易理解</li></ul><p><strong>json的要求和语法格式</strong></p><ul><li>对象表示为键值对</li><li>数据由逗号分割</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>json是js对象的字符串表示法，它使用文本表示js对象的信息，本质是一个字符串。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var json&#x3D;&#39;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#39;&#x2F;&#x2F;JSON</span><br><span class="line">var obj&#x3D;&#123;a:&#39;hello&#39;,b:&#39;world&#39;&#125;&#x2F;&#x2F;JS</span><br></pre></td></tr></table></figure><p><strong>json与js对象互转</strong></p><p>要实现json字符串转换为js对象，使用JSON.parse()方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj&#x3D;JSON.parse(&#39;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#39;)&#x2F;&#x2F;结果是&#123;a:&#39;hello&#39;,b:&#39;world&#39;&#125;</span><br></pre></td></tr></table></figure><p>要实现js对象转换为json字符，使用JSON.stringfy()方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var json&#x3D;JSON.stringfy(&#123;a:&#39;hello&#39;,b:&#39;world&#39;&#125;)&#x2F;&#x2F;结果是&#39;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;world&quot;&#125;&#39;</span><br></pre></td></tr></table></figure><p>测试：通过运行下面代码，按F12打开浏览器的控制台可以查看相应的对象</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;编写一个对象</span><br><span class="line">    var user&#x3D;&#123;</span><br><span class="line">         name:&quot;李青&quot;,</span><br><span class="line">         age:3,</span><br><span class="line">         sex:&quot;男&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F;输出一下这个对象</span><br><span class="line">    console.log(user);</span><br><span class="line">    &#x2F;&#x2F;将js对象转化为json对象</span><br><span class="line">    var  str&#x3D;JSON.stringify(user);</span><br><span class="line">    console.log(str);&#x2F;&#x2F;&#123;&quot;name&quot;:&quot;李青&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;</span><br><span class="line">    var obj&#x3D;JSON.parse(str);&#x2F;&#x2F;再次转化为对象</span><br><span class="line">    console.log(obj);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="获取json实例"><a href="#获取json实例" class="headerlink" title="获取json实例"></a>获取json实例</h2><p>创建实体类User</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.pojo;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private String sex;</span><br><span class="line">        public User(String name,int age,String sex)&#123;</span><br><span class="line">            this.name&#x3D;name;</span><br><span class="line">            this.sex&#x3D;sex;</span><br><span class="line">            this.age&#x3D;age;</span><br><span class="line">        &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &quot;, age&#x3D;&quot; + age +</span><br><span class="line">                &quot;, sex&#x3D;&#39;&quot; + sex + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age &#x3D; age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex &#x3D; sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UserController类从而实现获取json</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.controller;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.kun.pojo.User;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UseController &#123;</span><br><span class="line">    &#x2F;&#x2F;json需要返回一个字符串，使用jackon实现这个功能，jack只需要一个简单的注解</span><br><span class="line">    @RequestMapping(value &#x3D; &quot;&#x2F;json1&quot;,produces &#x3D;&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    &#x2F;&#x2F;ResponseBody 将服务器返回的对象转换为JSON对象响应回去</span><br><span class="line">    &#x2F;&#x2F;procuces属性指定响应体返回类型和属性，避免出现乱码</span><br><span class="line">    public String json1()throws JsonProcessingException &#123;</span><br><span class="line">     &#x2F;&#x2F;需要一个jackson对象映射器,就是一个类，使用它可以直接将对象转化为json字符串</span><br><span class="line">        ObjectMapper mapper&#x3D;new ObjectMapper();</span><br><span class="line">        &#x2F;&#x2F;创建一个对象</span><br><span class="line">        User user&#x3D;new User(&quot;李青1号&quot;,1,&quot;男&quot;);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        &#x2F;&#x2F;将java对象转换json字符串</span><br><span class="line">        String str&#x3D;mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        return  str;&#x2F;&#x2F;由于使用了ResponseBody注解，这里会将str以json字符串返回，十分方便</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">        &lt;!--解决JSON乱码问题--&gt;</span><br><span class="line">        &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;bean&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;objectMapper&quot;&gt;</span><br><span class="line">                    &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">                        &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;bean&gt;</span><br><span class="line">                &lt;&#x2F;property&gt;</span><br><span class="line">            &lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">    &lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line">    &lt;!--静态资源过滤--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line">    &lt;!--扫描包controller--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.kun.controller&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--视图解析器--&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>为了解决json的乱码问题除了上述的produces属性还可以在springmvc-servlet.xml文件中mvc中添加以下代码为其设置属性</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven&gt;</span><br><span class="line">       &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;</span><br><span class="line">           &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">               &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">           &lt;&#x2F;bean&gt;</span><br><span class="line">           &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">               &lt;property name&#x3D;&quot;objectMapper&quot;&gt;</span><br><span class="line">                   &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">                       &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">                   &lt;&#x2F;bean&gt;</span><br><span class="line">               &lt;&#x2F;property&gt;</span><br><span class="line">           &lt;&#x2F;bean&gt;</span><br><span class="line">       &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">   &lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure><p>首先运行主界面index.jsp，成功后将网址的index.jsp改为json1得到结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/IQWQL(CYZTPJ510%60D1U4%60)M.png" alt="img"></p><p>获取当地时间的json</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(value &#x3D; &quot;&#x2F;json4&quot;,produces &#x3D;&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public String json4()throws JsonProcessingException &#123;</span><br><span class="line">       ObjectMapper mapper&#x3D;new ObjectMapper();</span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false);&#x2F;&#x2F;关闭时间戳</span><br><span class="line">       SimpleDateFormat sim&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">      mapper.setDateFormat(sim);</span><br><span class="line">      Date date&#x3D;new Date();</span><br><span class="line">       return mapper.writeValueAsString(date);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/uio.png" alt="uio"></p><p>将上述的获取事件封装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.utils;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line">    public static String getJson(Object object)&#123;</span><br><span class="line">        return getJson(object,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getJson(Object object,String dataFormat)&#123;</span><br><span class="line">        ObjectMapper mapper&#x3D;new ObjectMapper();</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false);&#x2F;&#x2F;关闭时间戳</span><br><span class="line">        SimpleDateFormat sim&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        mapper.setDateFormat(sim);</span><br><span class="line">        try &#123;</span><br><span class="line">            return mapper.writeValueAsString(object);</span><br><span class="line">        &#125;catch(JsonProcessingException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p><strong>Ajax</strong>=<strong>Asynchronous JavaScript And XML</strong>(异步的JavaScript和XML)</p><p>Ajax的核心是JavaScript对象XmlHttpRequest。该对象在Internet Explorer 5中首次引入，它是一种支持异步请求的技术。简而言之，XmlHttpRequest使您可以使用JavaScript向服务器提出请求并处理响应，而不阻塞用户。</p><p>Ajax对服务器没什么要求，可以为Java EE应用程序，.NET应用程序和其他类型的应用程序服务。可以通过Ajax，可以编写javascript代码来改进HTML，创建出丰富的交互性用户体验。</p><p>Ajax是一种无需重新加载整个网页的情况下，能够更新部分网友的技术。</p><p>AjaX 不是新的编程语言，而是一种使用现有标准的新方法。</p><p>AjaX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p><p>AjaX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p><p>利用Ajax可以</p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>等等</li></ul><p><strong>伪造Ajax</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;伪造Ajax&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">     window.onload&#x3D;function f() &#123;</span><br><span class="line">         var myDate&#x3D;new Date();</span><br><span class="line">         document.getElementById(&#39;currentTime&#39;).innerText&#x3D;myDate.getTime();</span><br><span class="line">     &#125;</span><br><span class="line">     function loadPage() &#123;</span><br><span class="line">         var targetURL&#x3D;document.getElementById(&#39;url&#39;).value;</span><br><span class="line">         console.log(targetURL);</span><br><span class="line">         document.getElementById(&#39;iframePosition&#39;).src&#x3D;targetURL;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">       &lt;p&gt;请输入要加载的地址：&lt;span id&#x3D;&quot;currentTime&quot;&gt;&lt;&#x2F;span&gt; &lt;&#x2F;p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">           &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;url&quot; value&#x3D;&quot;https:&#x2F;&#x2F;re.1688.com&#x2F;&quot;&gt;</span><br><span class="line">           &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;loadPage()&quot;&gt; </span><br><span class="line">       &lt;&#x2F;p&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">       &lt;h3&gt;加载页面的位置&lt;&#x2F;h3&gt;</span><br><span class="line">       &lt;iframe style&#x3D;&quot;width: 100%;height: 500px;&quot;id&#x3D;&quot;iframePosition&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/WO@QK2B8K@~UEX7NH1YLW%60V.png" alt="img"></p><p><strong>学会使用JQuery</strong></p><p>JQuery提供了许多与Ajax有关的方法</p><p>JQuery是大自然的搬运工</p><p>使用JQuery需要导入JQuery的包</p><p>常用的方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. jQuery.get (...)</span><br><span class="line">所有参数:</span><br><span class="line">     url;待载入页面的URL地址</span><br><span class="line">     data:待发送Key&#x2F;value参数。</span><br><span class="line">     success:载入成功时回调函数。</span><br><span class="line">     dataType:返回内容格式，xml，ison, script,text，html</span><br><span class="line">2.jQuery.post(...)</span><br><span class="line">所有参数:</span><br><span class="line">    url:待载入页面的url地址</span><br><span class="line">    data:待发送Key&#x2F;value参数</span><br><span class="line">    succeas:载入成功时回调函数</span><br><span class="line">    dataType:返回内容格式，xml,json,script,text,html</span><br><span class="line">3jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">          url：请求地址</span><br><span class="line">         type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">      headers：请求头</span><br><span class="line">         data：要发送的数据</span><br><span class="line">  contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)</span><br><span class="line">        async：是否异步</span><br><span class="line">      timeout：设置请求超时时间（毫秒）</span><br><span class="line">   beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">     complete：完成之后执行的回调函数(全局)</span><br><span class="line">      success：成功之后执行的回调函数(全局)</span><br><span class="line">        error：失败之后执行的回调函数(全局)</span><br><span class="line">      accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">     dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">        &quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">       &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">       &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">     &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">       &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">      &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure><p>编写AjaxController类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;ajax&quot;)</span><br><span class="line">public class AjaxController &#123;</span><br><span class="line">    &#x2F;&#x2F;第一种方式，服务器要返回一个字符串，直接使用response;</span><br><span class="line">    @RequestMapping(&quot;&#x2F;a1&quot;)</span><br><span class="line">    public void ajax1(String name , HttpServletResponse response) throws IOException &#123;</span><br><span class="line">        if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">            response.getWriter().print(&quot;true&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            response.getWriter().print(&quot;false&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写index.jsp写前端界面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Ajax&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;%--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;--%&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.0.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function a1()&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;ajax&#x2F;a1&quot;,</span><br><span class="line">                data:&#123;&#39;name&#39;:$(&quot;#txtName&quot;).val()&#125;,</span><br><span class="line">                success:function (data,status) &#123;</span><br><span class="line">                    alert(data);</span><br><span class="line">                    alert(status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txtName&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>通过测试发现输入admin会提示true</p><p><strong>获取集合对象</strong></p><p>在AjaxController里面添加如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">   @RequestMapping(&quot;&#x2F;a2&quot;)</span><br><span class="line">   public List&lt;User&gt; ajax2()&#123;</span><br><span class="line">       List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();</span><br><span class="line">       list.add(new User(&quot;李青1号&quot;,3,&quot;男&quot;));</span><br><span class="line">       list.add(new User(&quot;李青2号&quot;,3,&quot;男&quot;));</span><br><span class="line">       list.add(new User(&quot;李青3号&quot;,3,&quot;男&quot;));</span><br><span class="line">       return list; &#x2F;&#x2F;由于@RestController注解，将list转成json格式返回</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>前端界面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Ajax&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;获取数据&quot;&#x2F;&gt;</span><br><span class="line">&lt;table width&#x3D;&quot;80%&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;tbody id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">    &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.0.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">        $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">            $.post(&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;ajax&#x2F;a2&quot;,function (data) &#123;</span><br><span class="line">                console.log(data);</span><br><span class="line">                var html&#x3D;&quot;&quot;;</span><br><span class="line">                for (var i &#x3D; 0; i &lt;data.length ; i++) &#123;</span><br><span class="line">                    html+&#x3D; &quot;&lt;tr&gt;&quot; +</span><br><span class="line">                        &quot;&lt;td&gt;&quot; + data[i].name + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                        &quot;&lt;td&gt;&quot; + data[i].age + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                        &quot;&lt;td&gt;&quot; + data[i].sex + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                        &quot;&lt;&#x2F;tr&gt;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">                $(&quot;#content&quot;).html(html);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/uuu.png" alt="uuu">优化</p><p><strong>优化注册提示</strong></p><p>在AjaxController里面添加如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">@RequestMapping(&quot;&#x2F;a3&quot;)</span><br><span class="line">   public String ajax3(String name,String pwd)&#123;</span><br><span class="line">       String msg &#x3D; &quot;&quot;;</span><br><span class="line">       &#x2F;&#x2F;模拟数据库中存在数据</span><br><span class="line">       if (name!&#x3D;null)&#123;</span><br><span class="line">           if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">               msg &#x3D; &quot;OK&quot;;</span><br><span class="line">           &#125;else &#123;</span><br><span class="line">               msg &#x3D; &quot;用户名输入错误&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       if (pwd!&#x3D;null)&#123;</span><br><span class="line">           if (&quot;123456&quot;.equals(pwd))&#123;</span><br><span class="line">               msg &#x3D; &quot;OK&quot;;</span><br><span class="line">           &#125;else &#123;</span><br><span class="line">               msg &#x3D; &quot;密码输入有误&quot;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return msg; &#x2F;&#x2F;由于@RestController注解，将msg转成json格式返回</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>登录前端界面</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.6.0.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function a1()&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;ajax&#x2F;a3&quot;,</span><br><span class="line">                data:&#123;&#39;name&#39;:$(&quot;#name&quot;).val()&#125;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                        $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(&quot;#userInfo&quot;).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        function a2()&#123;</span><br><span class="line">            $.post(&#123;</span><br><span class="line">                url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;ajax&#x2F;a3&quot;,</span><br><span class="line">                data:&#123;&#39;pwd&#39;:$(&quot;#pwd&quot;).val()&#125;,</span><br><span class="line">                success:function (data) &#123;</span><br><span class="line">                    if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                        $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    $(&quot;#pwdInfo&quot;).html(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;userInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    密码:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;pwd&quot; onblur&#x3D;&quot;a2()&quot;&#x2F;&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;pwdInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/31R%7BT2FZ9U@GAEA3CDCA@E8.png" alt="img"></p><p>目录结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/mulu.png" alt="mulu"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AOP</title>
      <link href="2021/09/03/AOP/"/>
      <url>2021/09/03/AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h2><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为:面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP主要实现的目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。比如我们最常见的就是日志记录了，举个例子，我们现在提供一个查询学生信息的服务，但是我们希望记录有谁进行了这个查询。如果按照传统的OOP的实现的话，那我们实现了一个查询学生信息的服务接口(StudentInfoService)和其实现 类 (StudentInfoServiceImpl.java)，同时为了要进行记录的话，那我们在实现类(StudentInfoServiceImpl.java)中要添加其实现记录的过程。这样的话，假如我们要实现的服务有多个呢?那就要在每个实现的类都添加这些记录过程。这样做的话就会有点繁琐，而且每个实现类都与记录服务日志的行为紧耦合，违反了面向对象的规则。那么怎样才能把记录服务的行为与业务处理过程中分离出来呢?看起来好像就是查询学生的服务自己在进行，但却是背后日志记录对这些行为进行记录，并且查询学生的服务不知道存在这些记录过程。</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/B~%5D2V9E8B0PZTJJGNAN2VE2.png" alt="img"></p><h2 id="AOP在Spring里面的作用"><a href="#AOP在Spring里面的作用" class="headerlink" title="AOP在Spring里面的作用"></a>AOP在Spring里面的作用</h2><p>提供声明式服务：允许用户自定义切面</p><ul><li><p>横切关注点：跨越应用程序多个模块的方法和功能，与我们业务逻辑无关的，但是需要关注的部分，就是横切关注点，如日志、安全、缓存、事务等。</p></li><li><p>切面(ASPECT)：横切关注点被模块化的特殊对象，它是一个类。</p></li><li><p>通知(Advice)：切面必须要完成的工作，它是类的一个方法。</p></li><li><p>目标(Target)：被通知对象。</p></li><li><p>代理(Proxy)：向目标对象应用通知之后创建的对象。</p></li><li><p>切入点(PointCut)：切面通知执行的“地点”的定义。</p></li><li><p>连接点(JoinPoint)：与切入点匹配的执行点。</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/olo.png" alt="olo"></p></li></ul><p>SpringAop中，通过Advice定义横切逻辑，Spring支持五种类型的Advice：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/HMQ%5D(5$HN%7D3%7BSMUSJG0K%5B)0.png" alt="img"></p><p>AOP在原有代码情况下，去增加新的功能。</p><h2 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用Spring实现AOP</h2><p>导入AOP依赖的包</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.9.4&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>新建项目</p><p>建立如图所示的目录</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/W%5BUO_$MDPCP_A75B3XV%60J2N.png" alt="img"></p><p>日志类</p><p>log</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.log;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class log  implements MethodBeforeAdvice &#123;</span><br><span class="line">    &#x2F;&#x2F; method:要执行的目标对象的方法</span><br><span class="line">    &#x2F;&#x2F; args:参数</span><br><span class="line">    &#x2F;&#x2F; target:目标</span><br><span class="line">    public void before(Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">      System.out.println(target.getClass()+&quot;的&quot;+method.getName()+&quot;方法被执行了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Afterlog</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.log;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class Afterlog implements AfterReturningAdvice &#123;</span><br><span class="line">    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;执行了&quot;+method.getName()+&quot;返回结果为&quot;+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务层</p><p>UserService</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.service;</span><br><span class="line"></span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    public void add();</span><br><span class="line">    public void delete();</span><br><span class="line">    public void update();</span><br><span class="line">    public void select();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.service;</span><br><span class="line"></span><br><span class="line">public class UserServiceImpl implements UserService&#123;</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;增加了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;删除了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void update() &#123;</span><br><span class="line">        System.out.println(&quot;修改了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void select() &#123;</span><br><span class="line">        System.out.println(&quot;查询了一个用户&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类mytest</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.kun.service.UserService;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class mytest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context&#x3D;new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F;动态代理代理的是接口</span><br><span class="line">        UserService userService &#x3D;(UserService)context.getBean(&quot;userService&quot;);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式一：使用Spring的API接口</p><p>配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line">    &lt;!--bean--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.kun.service.UserServiceImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.kun.log.log&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;afterlog&quot; class&#x3D;&quot;com.kun.log.Afterlog&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--配置aop需要导入配置AOP的约束--&gt;</span><br><span class="line">    &lt;!--方式一--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">     &lt;!--切入点 expression:表达式，execution(要执行的位置* * * * *)--&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.kun.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;</span><br><span class="line">     &lt;!--执行环绕--&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;afterlog&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/9890.png" alt="9890"></p><p>方式二：自定义来实现AOP</p><p>新建一个diy包</p><p>创建DiypoinCut类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.diy;</span><br><span class="line"></span><br><span class="line">public class DiyPointCut &#123;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行前&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public  void after()&#123;</span><br><span class="line">    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;方法执行后&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在applicationContext类中aop配置代码修改如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--方式2--&gt;</span><br><span class="line">     &lt;bean id&#x3D;&quot;diy&quot; class&#x3D;&quot;com.kun.diy.DiyPointCut&quot;&#x2F;&gt;</span><br><span class="line">      &lt;aop:config&gt;</span><br><span class="line">          &lt;!--自定义切面 ref:引用的类--&gt;</span><br><span class="line">           &lt;aop:aspect ref&#x3D;&quot;diy&quot;&gt;</span><br><span class="line">          &lt;!--切入点--&gt;</span><br><span class="line">              &lt;aop:pointcut id&#x3D;&quot;point&quot; expression&#x3D;&quot;execution(* com.kun.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;</span><br><span class="line">           &lt;!--通知--&gt;</span><br><span class="line">               &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;</span><br><span class="line">               &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;point&quot;&#x2F;&gt;</span><br><span class="line">           &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">      &lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/3232.png" alt="3232"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM框架整合</title>
      <link href="2021/06/26/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/"/>
      <url>2021/06/26/SSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="一、建立数据库"><a href="#一、建立数据库" class="headerlink" title="一、建立数据库"></a>一、建立数据库</h1><p>建立一个数据库，里面创建表books,具有书的id,名字，数量，具体描述四个属性</p><h1 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h1><p>1.创建-maven项目!   ssmbulid, 添加web 的支持</p><p>目录结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/io.png" alt="io"></p><p>2.导入相应的pom依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.kun&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ssmbuild&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">     &lt;!--依赖: junit,数据库驱动,连接池,servlet,jsp,mybatis,mybatis-spring--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--junit--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--数据库驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--数据库连接池--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.9.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--servlet -jsp --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- mybatis--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- spring--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--横切植入导的包--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.8.13&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- lombok--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.12&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                    &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;&#x2F;includes&gt;</span><br><span class="line">                &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;&#x2F;resources&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>3.web.xml文件的配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line">     &lt;!--DispatchServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">    &lt;!--乱码过滤 --&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line">    &lt;!--session--&gt;</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;15&lt;&#x2F;session-timeout&gt;</span><br><span class="line">    &lt;&#x2F;session-config&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>4.编写相应的配置文件</p><p><strong>mybatis-config.xml</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;!--configuration核心配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!--配置数据源，交给Spring去做--&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.kun.pojo&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;typeAliases&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper class&#x3D;&quot;com.kun.dao.BookMapper&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><ul><li><p>applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;classpath:spring-dao.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;classpath:spring-service.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;classpath:spring-mvc.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p><strong>database.properties</strong></p><p>数据库配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mysql  5  驱动不同，如果为8需要加入时区配置，并且要改为com.mysql.cj.jdbc.Driver,</span><br><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?useSSL&#x3D;false&amp;&amp;useUnicode&#x3D;true&amp;&amp;characterEncoding&#x3D;utf-8</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure><p><strong>spring-dao.xml</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--1关联数据库配置文件--&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:database.properties&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--2连接池</span><br><span class="line">      dbcp:半自动化操作，不能自动连接</span><br><span class="line">      c3p0:自动化操作(自动化的加载配置文件，并且可自动设置到对象中</span><br><span class="line">      druid:hikari</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--c3p0连接池的私有属性--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxPoolSize&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;minPoolSize&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--关闭连接后不自动commit--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;autoCommitOnClose&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--获取连接超时时间--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;checkoutTimeout&quot; value&#x3D;&quot;10000&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--获取连接失败重试次数--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;acquireRetryAttempts&quot; value&#x3D;&quot;2&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--3sqlSessionFactory--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--绑定mybatis 的配置文件--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--4配置 dao接口扫描包，动态的实现了Dao接口可以注入到spring容器中--&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!--注入sqlSessionFactory--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!--要扫描的dao包--&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.kun.dao&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p><strong>spring-mvc.xml</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--注解驱动--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&#x2F;&gt;</span><br><span class="line">    &lt;!--静态资源过滤--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line">    &lt;!--扫描包controller--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.kun.controller&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--视图解析器--&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p><strong>spring-service.xml</strong></p><p>spring整合Mybatis的相关配置文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--扫描sercice下的包--&gt;</span><br><span class="line">       &lt;context:component-scan base-package&#x3D;&quot;com.kun.service&quot;&#x2F;&gt;</span><br><span class="line">       &lt;!--将我们的所有业务类注入到spring，可以通过配置或注解实现--&gt;</span><br><span class="line">        &lt;bean id&#x3D;&quot;BookServiceImpl&quot; class&#x3D;&quot;com.kun.service.BookServiceImpl&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;bookMapper&quot; ref&#x3D;&quot;bookMapper&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">      &lt;!--声明事物配置--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!--注入数据源--&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--aop事物支持--&gt;</span><br><span class="line">    &lt;!--配置事物通知--&gt;</span><br><span class="line">    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">        &lt;!--给那些方法配置事务--&gt;</span><br><span class="line">        &lt;!--配置事务的传播特性 new propagation--&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">           &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line">    &lt;!--配置事务切入--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;txPointCut&quot; expression&#x3D;&quot;execution(* com.kun.dao.*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;txPointCut&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><h3 id="pojo层"><a href="#pojo层" class="headerlink" title="pojo层"></a>pojo层</h3><p>创建实体类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.pojo;</span><br><span class="line"></span><br><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Books &#123;</span><br><span class="line">    private int bookId;</span><br><span class="line">    private String bookName;</span><br><span class="line">    private  int bookCounts;</span><br><span class="line">    private String detail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h3><p>BookMapper接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.dao;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import com.kun.pojo.Books;</span><br><span class="line">import org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line">public interface BookMapper &#123;</span><br><span class="line">    &#x2F;&#x2F;增加一本书</span><br><span class="line">    int  addBook(Books books);</span><br><span class="line">    &#x2F;&#x2F;删除一本书</span><br><span class="line">    int deleteById(@Param(&quot;bookId&quot;) int id);</span><br><span class="line">    &#x2F;&#x2F;更新一本书</span><br><span class="line">    int updateBook(Books books);</span><br><span class="line">    &#x2F;&#x2F;查询一本书</span><br><span class="line">    Books queryBookId(@Param(&quot;bookId&quot;) int id);</span><br><span class="line">    &#x2F;&#x2F;查询全部书</span><br><span class="line">    List&lt;Books&gt; queryAllBook();</span><br><span class="line">    &#x2F;&#x2F;搜索书籍</span><br><span class="line">    Books queryBookByName (String bookName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BookMapper.xml</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.kun.dao.BookMapper&quot;&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;addBook&quot; parameterType&#x3D;&quot;Books&quot;&gt;</span><br><span class="line">        insert into ssm.books(bookId,bookName,bookCounts,detail) value (#&#123;bookId&#125;,#&#123;bookName&#125;,#&#123;bookCounts&#125;,#&#123;detail&#125;);</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line">    &lt;delete id&#x3D;&quot;deleteById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">        delete  from ssm.books where bookId&#x3D;#&#123;bookId&#125;;</span><br><span class="line">    &lt;&#x2F;delete&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;updateBook&quot; parameterType&#x3D;&quot;Books&quot;&gt;</span><br><span class="line">        update ssm.books set bookName&#x3D;#&#123;bookName&#125;,bookCounts&#x3D;#&#123;bookCounts&#125;,detail&#x3D;#&#123;detail&#125; where bookId&#x3D;#&#123;bookId&#125;;</span><br><span class="line">    &lt;&#x2F;update&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;queryBookId&quot; resultType&#x3D;&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssm.books where bookId&#x3D;#&#123;bookId&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;queryAllBook&quot; resultType&#x3D;&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssm.books;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;queryBookByName&quot; resultType&#x3D;&quot;Books&quot;&gt;</span><br><span class="line">        select * from ssm.books where bookName&#x3D;#&#123;bookName&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><h3 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h3><p>BookService接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.service;</span><br><span class="line"></span><br><span class="line">import com.kun.pojo.Books;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface BookService &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;增加一本书</span><br><span class="line">        int  addBook(Books books);</span><br><span class="line">        &#x2F;&#x2F;删除一本书</span><br><span class="line">        int deleteById( int id);</span><br><span class="line">        &#x2F;&#x2F;更新一本书</span><br><span class="line">        int updateBook(Books books);</span><br><span class="line">        &#x2F;&#x2F;查询一本书</span><br><span class="line">        Books queryBookId( int id);</span><br><span class="line">        &#x2F;&#x2F;查询全部书</span><br><span class="line">        List&lt;Books&gt; queryAllBook();</span><br><span class="line">        &#x2F;&#x2F;搜索书籍</span><br><span class="line">        Books queryBookByName (String bookName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BookServiceImpl调用接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.service;</span><br><span class="line"></span><br><span class="line">import com.kun.dao.BookMapper;</span><br><span class="line">import com.kun.pojo.Books;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class BookServiceImpl implements BookService&#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;service调用dao层：组合dao</span><br><span class="line">    private BookMapper bookMapper;</span><br><span class="line">    public void setBookMapper(BookMapper bookMapper)&#123;</span><br><span class="line">        this.bookMapper&#x3D;bookMapper;</span><br><span class="line">    &#125;</span><br><span class="line">    public int addBook(Books books) &#123;</span><br><span class="line">        return bookMapper.addBook(books);</span><br><span class="line">    &#125;</span><br><span class="line">    public int deleteById(int id) &#123;</span><br><span class="line">        return bookMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public int updateBook(Books books) &#123;</span><br><span class="line">        return bookMapper.updateBook(books);</span><br><span class="line">    &#125;</span><br><span class="line">    public Books queryBookId(int id) &#123;</span><br><span class="line">        return bookMapper.queryBookId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    public List&lt;Books&gt; queryAllBook() &#123;</span><br><span class="line">        return bookMapper.queryAllBook();</span><br><span class="line">    &#125;</span><br><span class="line">    public Books queryBookByName(String bookName) &#123;</span><br><span class="line">        return bookMapper.queryBookByName(bookName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h3><p>创建一个BookController类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.controller;</span><br><span class="line"></span><br><span class="line">import com.kun.pojo.Books;</span><br><span class="line">import com.kun.service.BookService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line">    &#x2F;&#x2F;controller 调用service层</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;BookServiceImpl&quot;)</span><br><span class="line">    private BookService bookService;</span><br><span class="line">    &#x2F;&#x2F;查询全部书籍，并且返回到一个书籍展示界面</span><br><span class="line">    @RequestMapping(&quot;&#x2F;allBook&quot;)</span><br><span class="line">    public String list(Model model)&#123;</span><br><span class="line">        List&lt;Books&gt; list&#x3D;bookService.queryAllBook();</span><br><span class="line">        model.addAttribute(&quot;list&quot;,list);</span><br><span class="line">        return &quot;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;跳转到增加数据界面</span><br><span class="line">    @RequestMapping(&quot;&#x2F;toAddBook&quot;)</span><br><span class="line">    public String toAddPaper()&#123;</span><br><span class="line">        return &quot;addBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;添加书籍的请求</span><br><span class="line">    @RequestMapping(&quot;&#x2F;addBook&quot;)</span><br><span class="line">    public String addBook(Books books)&#123;</span><br><span class="line">        System.out.println(&quot;addBooks&#x3D;&gt;+books&quot;);</span><br><span class="line">        bookService.addBook(books);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#x2F;&#x2F;重定向到allBook</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;跳转到修改界面</span><br><span class="line">    @RequestMapping(&quot;&#x2F;toUpdate&quot;)</span><br><span class="line">    public String toUpdatePaper(int id,Model model)&#123;</span><br><span class="line">        Books books&#x3D;bookService.queryBookId(id);</span><br><span class="line">        model.addAttribute(&quot;QBook&quot;,books);</span><br><span class="line">        return &quot;updateBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;修改书籍的请求</span><br><span class="line">    @RequestMapping(&quot;&#x2F;updateBook&quot;)</span><br><span class="line">    public String updateBook(Books books)&#123;</span><br><span class="line">        System.out.println(&quot;updateBook&#x3D;&gt;&quot;+books);</span><br><span class="line">        bookService.updateBook(books);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#x2F;&#x2F;重定向到allBook</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;删除书籍的请求</span><br><span class="line">    @RequestMapping(&quot;&#x2F;deleteBook&#x2F;&#123;bookId&#125;&quot;)</span><br><span class="line">    public String deleteBook(@PathVariable(&quot;bookId&quot;) int id)&#123;</span><br><span class="line">        bookService.deleteById(id);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#x2F;&#x2F;重定向到allBook</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;搜索书籍</span><br><span class="line">    @RequestMapping(&quot;&#x2F;queryBook&quot;)</span><br><span class="line">    public String queryBook(String queryBookName,Model model)&#123;</span><br><span class="line">       Books books&#x3D;bookService.queryBookByName(queryBookName);</span><br><span class="line">       List&lt;Books&gt; list&#x3D;new ArrayList&lt;Books&gt;();</span><br><span class="line">       list.add(books);</span><br><span class="line">       if(books&#x3D;&#x3D;null)&#123;</span><br><span class="line">           list&#x3D;bookService.queryAllBook();</span><br><span class="line">           model.addAttribute(&quot;error&quot;,&quot;查不到&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       model.addAttribute(&quot;list&quot;,list);</span><br><span class="line">       return &quot;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在web-inf目录下创建一个jsp包，包中创建allBook.jsp,addBook.jsp,updateBook.jsp</p><p>index.jsp代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      a&#123;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">        color: black;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">      h3&#123;</span><br><span class="line">         width: 180px;</span><br><span class="line">         height: 38px;</span><br><span class="line">         margin: 100px auto;</span><br><span class="line">        text-align: center;</span><br><span class="line">        line-height: 38px;</span><br><span class="line">        background: deepskyblue;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h3&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;allBook&quot;&gt;进入书籍页面&lt;&#x2F;a&gt;</span><br><span class="line">  &lt;&#x2F;h3&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>allBook.jsp代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;%--BootStrap美化界面--%&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot;  rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表---显示所有书籍&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;col-md-4 column&quot;&gt;</span><br><span class="line">            &lt;%--toAddBook--%&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toAddBook&quot;&gt;新增书籍&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;allBook&quot;&gt;显示全部书籍&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;col-md-8 column&quot;&gt;</span><br><span class="line">               &lt;%--查询书籍--%&gt;</span><br><span class="line">               &lt;form class&#x3D;&quot;form-inline&quot; action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;queryBook&quot; method&#x3D;&quot;post&quot; style&#x3D;&quot;float: right&quot;&gt;</span><br><span class="line">                   &lt;span style&#x3D;&quot;color: red;font-width: bold&quot;&gt;$&#123;error&#125;&lt;&#x2F;span&gt;</span><br><span class="line">                   &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;queryBookName&quot; class&#x3D;&quot;form-control&quot; placeholder&#x3D;&quot;请输入要查询书籍的名称&quot;&gt;</span><br><span class="line">                   &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;查询&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;</span><br><span class="line">               &lt;&#x2F;form&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;cod-md-12 column&quot;&gt;</span><br><span class="line">            &lt;table class&#x3D;&quot;table table-hover table-striped&quot;&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;th&gt;书籍编号&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;书籍名称&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;书籍数量&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;书籍详情&lt;&#x2F;th&gt;</span><br><span class="line">                       &lt;th&gt;操作&lt;&#x2F;th&gt;</span><br><span class="line">                   &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;&#x2F;thead&gt;</span><br><span class="line">                 &lt;%--书籍信息从数据库查询出来，从list中遍历出来：foreach--%&gt;</span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                  &lt;c:forEach var&#x3D;&quot;book&quot; items&#x3D;&quot;$&#123;list&#125;&quot;&gt;</span><br><span class="line">                  &lt;tr&gt;</span><br><span class="line">                      &lt;td&gt;$&#123;book.bookId&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                      &lt;td&gt;$&#123;book.bookName&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                      &lt;td&gt;$&#123;book.bookCounts&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                      &lt;td&gt;$&#123;book.detail&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                      &lt;td&gt;</span><br><span class="line">                          &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toUpdate?id&#x3D;$&#123;book.bookId&#125;&quot;&gt;修改&lt;&#x2F;a&gt;</span><br><span class="line">                          &amp;nbsp;|&amp;nbsp</span><br><span class="line">                          &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;deleteBook&#x2F;$&#123;book.bookId&#125;&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">                      &lt;&#x2F;td&gt;</span><br><span class="line">                  &lt;&#x2F;tr&gt;</span><br><span class="line">                  &lt;&#x2F;c:forEach&gt;</span><br><span class="line">                &lt;&#x2F;tbody&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>addBook.jsp代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;%--BootStrap美化界面--%&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot;  rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;addBook&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍名称&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍数量&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot; class&#x3D;&quot;form-control&quot; &gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍详情&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot; class&#x3D;&quot;form-control&quot; &gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;添加&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>updateBook代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍展示&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;%--BootStrap美化界面--%&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot;  rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改书籍&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;updateBook&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;!--前端传递隐藏域--&gt;</span><br><span class="line">            &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookId&quot; value&#x3D;&quot;$&#123;QBook.bookId&#125;&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍名称&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;$&#123;QBook.bookName&#125;&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍数量&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;$&#123;QBook.bookCounts&#125;&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label &gt;书籍详情&lt;&#x2F;label&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;$&#123;QBook.detail&#125;&quot; &gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;submit&quot; class&#x3D;&quot;form-control&quot; value&#x3D;&quot;修改&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/ij.png" alt="ij"></p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/lllk.jpg" alt="lllk"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger实现增删改查</title>
      <link href="2021/06/04/Swagger%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>2021/06/04/Swagger%E5%AE%9E%E7%8E%B0%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger实现增删改查"><a href="#Swagger实现增删改查" class="headerlink" title="Swagger实现增删改查"></a>Swagger实现增删改查</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先创建SpringBoot项目，删除src目录下没有用的文件</p><h2 id="建立数据库swagger"><a href="#建立数据库swagger" class="headerlink" title="建立数据库swagger"></a>建立数据库swagger</h2><p>创建一个user表，并在里面添加数据</p><h3 id="导入相关依赖"><a href="#导入相关依赖" class="headerlink" title="导入相关依赖"></a>导入相关依赖</h3><p>在pom.xml导入Swagger依赖，数据库以及mybatis依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--Swagger依赖--&gt;   </span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--mysql驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--mybatis--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--junit--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!--lombok导入--&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.18.12&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>目录结构如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/8.jpg" alt="8"></p><h2 id="config层"><a href="#config层" class="headerlink" title="config层"></a>config层</h2><h3 id="配置swagger"><a href="#配置swagger" class="headerlink" title="配置swagger"></a>配置swagger</h3><p>在swagger-config的java类添加如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//是否开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;kun&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kun.swagger.controller&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置Swagger信息=apiInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;崔艳坤&quot;</span>,<span class="string">&quot;http://yankuncui.github.io&quot;</span>,<span class="string">&quot;2042762603@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;yankuncui的Swapper文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;有志者事竟成&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://yankuncui.github.io&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>在UserController的java类添加如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;UserController&quot;,description =&quot;用户相关的API&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询全部记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/getUserList&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list=<span class="keyword">this</span>.getUserList();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询记录&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value =&quot;/getUserById/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(<span class="meta">@ApiParam(&quot;ID&quot;)</span><span class="meta">@PathVariable</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user=<span class="keyword">this</span>.getUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加一条信息&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/addUser&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span></span>&#123;</span><br><span class="line">        User p=<span class="keyword">new</span> User();</span><br><span class="line">        p.setId(user.getId());</span><br><span class="line">        p.setName(user.getName());</span><br><span class="line">        p.setSex(user.getSex());</span><br><span class="line">        p.setAge(user.getAge());</span><br><span class="line">        <span class="keyword">this</span>.addUser(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id修改信息&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/updateUser/&#123;id&#125;&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@ApiParam(&quot;被修改的id&quot;)</span><span class="meta">@PathVariable</span> Integer id,<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        User p=<span class="keyword">new</span> User();</span><br><span class="line">        p.setId(id);</span><br><span class="line">        p.setName(user.getName());</span><br><span class="line">        p.setSex(user.getSex());</span><br><span class="line">        p.setAge(user.getAge());</span><br><span class="line">        <span class="keyword">this</span>.updateUser(id,p);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id删除信息&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/deleteUser/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@ApiParam(&quot;被删除的ID&quot;)</span><span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h2><p>在UserMapper接口类添加如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">   <span class="meta">@Select(&quot;select *from user&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@Select(&quot; select *  from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//insert插入一个用户</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into  user (id,name,sex,age) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;,&#123;age&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,sex=#&#123;sex&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@Delete(&quot; delete  from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="pojo层"><a href="#pojo层" class="headerlink" title="pojo层"></a>pojo层</h2><p>创建实体类User</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Integer id;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">  <span class="keyword">public</span>  String name;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String sex;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;年龄&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在resources包下创建一个mybatis-config.xml用于整合mybatis</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/swagger?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.kun.swagger.mapper.UserMapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>先运行项目</p><p>然后访问网站：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p>运行结果如下</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/l.jpg" alt="l"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger的使用与配置</title>
      <link href="2021/06/03/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>2021/06/03/Swagger%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>学习目标：</p><ul><li>了解Swagger的作用与概念</li><li>了解前后段分离</li><li>在SpringBoot中集成Swagger</li></ul><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p><strong>前后端分离</strong></p><p>后端时代：前端只用管理静态页面；html==&gt;后端。模板引擎 JSP==&gt;后端是主力</p><p>前后端分离式时代</p><ul><li><p>后端：后端控制层，服务层，数据访问层(后端团队)</p></li><li><p>前端：前端控制层，视图层(后端团队)</p><ul><li>   伪造后端数据，json。已经存在，不需要后端，前端工程依旧能够运行</li></ul></li><li><p>   前后端如何交互？===&gt;API</p></li><li><p>前后端相互独立，松耦合；</p></li><li><p>前后端甚至可以部署在不同的服务器上；</p></li></ul><p>产生一个问题：</p><ul><li> 前后端集成联调，前端人员和后端人员无法做到“即使协商，尽早解决”，最终导致问题集中爆发；</li></ul><p>解决方案：</p><ul><li>首先指定schema[计划的提纲]，实时更新最新API，降低集成的风险；</li><li>早些年，指定word计划文档；</li><li>前后端分离：<ul><li> 前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息及改动！</li></ul></li></ul><h2 id="Swagger-1"><a href="#Swagger-1" class="headerlink" title="Swagger"></a>Swagger</h2><ul><li>号称世界上最流行的API框架</li><li>RestFul Api文档在线生成工具=&gt;Api文档与Api定义同步更新</li><li>直接运行，可以在线测试API接口</li><li>支持多种语言：（Java,php等等）</li></ul><p>在项目使用Swagger需要springbox;</p><ul><li> swagger2</li><li>ui</li></ul><h2 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h2><p>1.新建一个SpringBoot-web项目</p><p>项目目录最终如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/9.jpg" alt="9"></p><p>2.导入相关依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>3.编写一个hello工程</p><p>4.配置Swagger===&gt;Config</p><p>在swagger包下创建一个config包里面创建一个SwaggerConfig的java类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2&#x2F;&#x2F;开启Swagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建第一个springboot项目用于测试</p><p>在controller包下面创建一个HelloController</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;value&#x3D;&#x2F;hello&quot;)</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问网站<a href="http://localhost:8080/hello">http://localhost:8080/hello</a> 如果运行成功证明项目成功创建</p><p>访问网站<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p>测试运行</p><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/pop.png" alt="pop"></p><p>​    <img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/7XM93K0K_W%5BEI@PHP%5B$BGAU.png" alt="img"></p><p>测试成功</p><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><p>Swagger的bean实例Docket</p><p>在SwaggerConfig的java类中在原有基础上添加扩展如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span> <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置了Swagger的Docket的bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置Swagger信息=apiInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">&quot;崔艳坤&quot;</span>,<span class="string">&quot;http://yankuncui.github.io&quot;</span>,<span class="string">&quot;2042762603@qq.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">&quot;yankuncui的Swapper文档&quot;</span>,</span><br><span class="line">                <span class="string">&quot;有志者事竟成&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://yankuncui.github.io&quot;</span>,</span><br><span class="line">                 contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">               <span class="keyword">new</span> ArrayList()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/7_G81D@488%7B5FTUT90ZNW%5D0.png" alt="img"></p><h2 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h2><p>在SwaggerConfig类中的Docket方法在原有的基础上进行扩展</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                &#x2F;&#x2F;RequestHandlerSelectors,配置要扫描接口的方式</span><br><span class="line">                &#x2F;&#x2F;basePackage：指定要扫描的包</span><br><span class="line">                &#x2F;&#x2F;com.x.x.x：扫描某包</span><br><span class="line">                &#x2F;&#x2F;any():扫描全部</span><br><span class="line">                &#x2F;&#x2F;none():不扫描</span><br><span class="line">                &#x2F;&#x2F;withClassAnnotation:扫描类上的注解</span><br><span class="line">                &#x2F;&#x2F;withMethodAnnodation:扫描方法上的注解</span><br><span class="line">                &#x2F;&#x2F;.paths(PathSelectors.ant(&quot;&#x2F;kun&#x2F;**&quot;))过滤路径，意为只扫描kun包下面的内容</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.kun.swagger.controller&quot;))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="配置是否启用Swagger"><a href="#配置是否启用Swagger" class="headerlink" title="配置是否启用Swagger"></a>配置是否启用Swagger</h2><p>在SwaggerConfig类中的Docket方法在原有的基础上进行扩展，主要加上了enable方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public Docket docket()&#123;</span><br><span class="line">        return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .enable(false)&#x2F;&#x2F;enable是否启动Swagger，如果为false，则Swagger不能在浏览器访问</span><br><span class="line">                .select()</span><br><span class="line">              </span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.kun.swagger.controller&quot;))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="配置API文档的分组"><a href="#配置API文档的分组" class="headerlink" title="配置API文档的分组"></a>配置API文档的分组</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.groupName(&quot;kun&quot;)&#x2F;&#x2F;在Docket方法进行扩展</span><br></pre></td></tr></table></figure><p>加上这个后右上角搜索框由default变为kun</p><p>配置多个分组，扩展多个Docket方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  Docket <span class="title">docket4</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//配置了Swagger的Docket的bean实例</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">               .apiInfo(apiInfo())</span><br><span class="line">               .groupName(<span class="string">&quot;kun&quot;</span>)</span><br><span class="line">               .select()</span><br><span class="line">               .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.kun.swagger.controller&quot;</span>))</span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加上这个后右上角搜索框点击就会有下拉列表，里面有A B C D kun五个选项</p><h2 id="实体类配置"><a href="#实体类配置" class="headerlink" title="实体类配置"></a>实体类配置</h2><p>创建一个pojo包，里面创建实体类User，并作出相应注释</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Api(注释)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在相应的controller包下的helloController的java类也做出相应修改</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;HelloController&quot;,description =&quot;坤哥的第一个Swagger&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;hello1控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只要我们的接口中，返回值存在实体类，他就会被扫描</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;hello2控制类&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//operation接口,不是放在类上是方法</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;hello3控制类&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/hello2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">hello2</span> <span class="params">(<span class="meta">@ApiParam(&quot;用户名&quot;)</span> String username)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过不断的注释以及优化最终结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/7.png" alt="7"></p><p>总结：</p><p>1.我们可以通过Swagger 给一些比较难理解的属性或者接口增加注释信息</p><p>2.接口文档实时更新</p><p>3.可以在线测试</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok的使用</title>
      <link href="2021/06/03/Lombok%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/06/03/Lombok%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>使用步骤</p><p>1.在idea中安装Lombok插件</p><p>2.在项目中导入jar包</p><p>利用maven</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;!--lombok导入--&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.18.12&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>3</p><p>使用时只需加到实体类上就可以，无需写构造方法只写注释</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Getter and @Setter</span><br><span class="line">@FieldNameConstants</span><br><span class="line">@ToString</span><br><span class="line">@EqualsAndHashCode</span><br><span class="line">@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor</span><br><span class="line">@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog</span><br><span class="line">@Data</span><br><span class="line">@Builder</span><br><span class="line">@SuperBuilder</span><br><span class="line">@Singular</span><br><span class="line">@Delegate</span><br><span class="line">@Value</span><br><span class="line">@Accessors</span><br><span class="line">@Wither</span><br><span class="line">@With</span><br><span class="line">@SneakyThrows</span><br></pre></td></tr></table></figure><p>说明</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.@Data:无参构造，get,set,tostring,hashcode,equals</span><br><span class="line">2.@AllArgConstructor有参构造</span><br><span class="line">3.@NOAllArgConstructor无参构造</span><br><span class="line">4.@EqualsAndHashCode</span><br><span class="line">5.@ToString</span><br><span class="line">6.@Getter and @Setter</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 偷懒神器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis使用注解开发</title>
      <link href="2021/06/03/mybatis%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>2021/06/03/mybatis%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p>根本原因：解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家遵守共同的标准，使得开发变得容易，规范性更好</p><p>在一个面向对象的系统中，系统的各种功能是由许多的不同对象协作完成的，在这种情况下，各个对象内部是如何实现自己的，对系统设计人员来讲就不重要了；</p><p>各个对象之间的协作关系则成为系统设计的关键，小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都要着重考虑的，这也是系统设计的主要工作内容，面向接口编程就是指按照这种思想来编程。</p><h3 id="关于接口的理解"><a href="#关于接口的理解" class="headerlink" title="关于接口的理解"></a>关于接口的理解</h3><p>接口从更深层次的理解，应是定义(规范，约束)与实现(名实分离的原则)的分离。</p><p>接口的本身反映了系统设计人员对系统的抽象理解。</p><p>接口应有两类：</p><p>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class);</p><p>第二类是对一个个体某一方面的抽象，即可形成一个抽象面(interface)；</p><p>一个个体可能有多种抽象面，抽象体与抽象面是有区别的。</p><h3 id="三个面向区别"><a href="#三个面向区别" class="headerlink" title="三个面向区别"></a>三个面向区别</h3><p>面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法。</p><p>面向过程是指，我们考虑问题时，以一个具体的流程(事务过程)为单位，考虑它的实现。</p><p>接口设计与非接口设计是针对复用技术而言的，与面向对象(过程)不是一个问题，更多的体现就是对系统整体的架构</p><h2 id="使用注解开发-1"><a href="#使用注解开发-1" class="headerlink" title="使用注解开发"></a>使用注解开发</h2><p>新建一个module命名为mybatis-02,将mybatis-01中java包下的com包复制到相应位置，删去UserMapper.xml。修改resources下面的mybatis-confing.xml文件，将绑定接口进行相应的修改</p><p>1.注解在接口上实现</p><p>在UserDao接口中加入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查询全部用户</span><br><span class="line">    @Select(&quot;select *from user&quot;)</span><br><span class="line">    List&lt;User&gt; getUsers();</span><br></pre></td></tr></table></figure><p>2.需要在核心配置文件中绑定接口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--绑定接口--&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class&#x3D;&quot;com.kun.dao.UserDao&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>3.测试</p><p>在test的java包下面创建测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper=sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; users=mapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">         sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试发现成功</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>我们可以在工具类，创建的时候实现自动提交事务！</p><p>在utils包下MybatisUtils的Java类的最后一句添加一个true,表示自动提交事务，方便增删改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static SqlSession getSqlSession()&#123;</span><br><span class="line">        return sqlSessionFactory.openSession(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询</p><p>在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根据id查询用户</span><br><span class="line">    @Select(&quot;select *from user where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">    &#x2F;&#x2F;方法存在多个参数，所有参数前面必须加上@Param(属性名)注解</span><br><span class="line">    User getUserById(@Param(&quot;id&quot;) int id);</span><br></pre></td></tr></table></figure><p>查询测试</p><p>在UserDaoTest加入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public  void getUserById()&#123;</span><br><span class="line">       SqlSession sqlSession&#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">       UserDao mapper&#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">       User userById&#x3D;mapper.getUserById(1);</span><br><span class="line">       System.out.println(userById);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>增加</p><p>在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">    @Insert(&quot;insert into  user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)&quot;)</span><br><span class="line">    int addUser(User user);</span><br></pre></td></tr></table></figure><p>增加测试</p><p>在UserDaoTest加入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void addUser()&#123;</span><br><span class="line">        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">        int res&#x3D;mapper.addUser(new User(4,&quot;赵六&quot;,&quot;123456&quot;));</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        if(res&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;插入成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;自动提交事务不需要sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改</p><p>在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改数据</span><br><span class="line">    @Update(&quot; update user set name&#x3D;#&#123;name&#125;,pwd&#x3D;#&#123;pwd&#125; where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">    int updateUser(User user);</span><br></pre></td></tr></table></figure><p>修改测试</p><p>在UserDaoTest加入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void updateUser()&#123;</span><br><span class="line">       SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">       UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">       int res&#x3D;mapper.updateUser(new User(4,&quot;呵呵&quot;,&quot;123456&quot;));</span><br><span class="line">       &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">       if(res&gt;0)&#123;</span><br><span class="line">           System.out.println(&quot;更新成功&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;自动提交事务不需要sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>删除</p><p>在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除数据</span><br><span class="line">&#x2F;&#x2F;注意Param注解的值要与#&#123;&#125;里面的一致</span><br><span class="line">    @Delete(&quot;delete  from user where id&#x3D;#&#123;id&#125;&quot;)</span><br><span class="line">    int deleteUser(@Param(&quot;id&quot;) int id);</span><br></pre></td></tr></table></figure><p>删除测试</p><p>在UserDaoTest加入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void deleteUser()&#123;</span><br><span class="line">       SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">       UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">       int res&#x3D;mapper.deleteUser(4);</span><br><span class="line">       if(res&gt;0)&#123;</span><br><span class="line">           System.out.println(&quot;删除成功&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;自动提交事务不需要sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注意：我们必须要将接口注册绑定到我们的核心配置文件中</p><p>关于@Param注解</p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要添加</li><li>如果只有一个基本类型的话，可以忽略，建议加上</li><li>我们在SQL中引用的就是我们@Param()中设定的属性名</li></ul><p>#{} ${}的区别</p><p> #{}能很大程度防止sql注入，${}无法防止注入,#{}更加安全。</p><h2 id="使用注解开发的局限性"><a href="#使用注解开发的局限性" class="headerlink" title="使用注解开发的局限性"></a>使用注解开发的局限性</h2><p>使用注解开发只能实现简单的SQL语句，无法实现多表查询等操作。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 入门</title>
      <link href="2021/06/01/MyBatis-%E5%85%A5%E9%97%A8/"/>
      <url>2021/06/01/MyBatis-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Mybatis"><a href="#什么是Mybatis" class="headerlink" title="什么是Mybatis"></a>什么是Mybatis</h1><ul><li><p>MyBatis 是一款优秀的持久层框架</p></li><li><p>它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集</p></li><li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></li><li><p>MyBatis本是apache的一个开源项目iBatis,2010年这个项目由apache software foundation迁移到了google code,并且改名为MyBatis</p></li><li><p>2013年迁移到Github。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>数据持久化</p><p>持久化就是将程序数据在持久状态和瞬时状态转化的过程</p><p>内存：断电即失</p><p>数据库(jdbc),io文件持久化</p><p>生活：冷藏</p><h2 id="为什么需要持久化"><a href="#为什么需要持久化" class="headerlink" title="为什么需要持久化"></a>为什么需要持久化</h2><p>有一些现象，不能丢掉</p><p>内存昂贵</p><h2 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h2><p>Dao层，Service层，Controller层</p><p>完成持久化工作的代码块</p><p>层界限十分明显</p><h4 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h4><p>DAO层叫数据访问层，全称为data access object，属于一种比较底层，比较基础的操作，具体到对于某个表的增删改查，也就是说某个DAO一定是和数据库的某一张表一一对应的，其中封装了增删改查基本操作，建议DAO只做原子操作，增删改查。</p><h4 id="Service层："><a href="#Service层：" class="headerlink" title="Service层："></a>Service层：</h4><p>Service层叫服务层，被称为服务，粗略的理解就是对一个或多个DAO进行的再次封装，封装成一个服务，所以这里也就不会是一个原子操作了，需要事物控制。</p><h4 id="Controler层："><a href="#Controler层：" class="headerlink" title="Controler层："></a>Controler层：</h4><p>Controler负责请求转发，接受页面过来的参数，传给Service处理，接到返回值，再传给页面。</p><p>总结：<br>DAO面向表，Service面向业务。后端开发时先数据库设计出所有表，然后对每一张表设计出DAO层，然后根据具体的业务逻辑进一步封装DAO层成一个Service层，对外提供成一个服务。</p><h2 id="为什么需要MyBatis"><a href="#为什么需要MyBatis" class="headerlink" title="为什么需要MyBatis"></a>为什么需要MyBatis</h2><ul><li>方便</li><li>传统的JDBC过于复杂。简化，框架，自动化。</li><li>帮助程序员将数据存入到数据库中</li><li>简单易学、灵活</li><li>sql和代码的分离，提高了可维护性</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql</li></ul></li></ul><h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h1><p>思路：搭建环境-&gt;导入mybatis-&gt;编写代码-&gt;测试</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="搭建数据库"><a href="#搭建数据库" class="headerlink" title="搭建数据库"></a>搭建数据库</h3><p>建一个user表</p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>项目目录大致如下</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/3%5BUSBBXV%7B7NR8G8%60HVW8JVP.png" alt="img"></p><p>1.创建一个maven项目</p><p>2.删除src目录</p><p>3.导入maven依赖</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--导入依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--mysql驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.47&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--mybatis--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!--junit--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><h3 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h3><p>右键项目点击new选择module，创建一个子项目mybatis-01</p><ul><li><p>编写mybatis的核心配置文件</p><p>在main包下面的resources包下创建一个mybatis-config.xml文件，将下面代码复制进去</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每一个Mapper.xml都需要在mybatis核心配置文件中注册！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kun/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis工具类</p></li></ul><p>在java包下，创建一个com.kun.utils包，com.kun.dao包，com.kun.pojo包，在utils包下创建Java类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.kun.utils;</span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">public class MybatisUtils &#123;</span><br><span class="line">    private static  SqlSessionFactory sqlSessionFactory;&#x2F;&#x2F;提升作用域</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;使用mybatis第一步：获取sqlSessionFactory对象</span><br><span class="line">            String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">            InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span><br><span class="line">    &#x2F;&#x2F; SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。</span><br><span class="line">    public static SqlSession getSqlSession()&#123;</span><br><span class="line">        return sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写代码</p><ul><li><p>实体类</p><p>在pojo包下，创建一个User类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.pojo;</span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">User</span><span class="params">(<span class="keyword">int</span> id,String name,String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">        <span class="keyword">this</span>.pwd=pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">getPwd</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd=pwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dao接口</p><p>在dao包下创建一个UserDao接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kun.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kun.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">  <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>接口实现类</p><p>在dao包下创建一个UserMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kun.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.kun.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>注意点：maven防止资源导出失败，需要在pom.xml文件添加配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources,来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在本项目中，为了保险起见，将其分别复制到父项目与子项目的pom.xml中。</p><ul><li><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：获取 SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession= MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//方式一：getMapper</span></span><br><span class="line">        UserDao userDao=sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; userList=sqlSession.selectList(&quot;com.kun.dao.UserDao.getUserList&quot;);//已经过时</span></span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能遇到的错误：</p><p>1.配置文件没有注册</p><p>2.绑定接口错误</p><p>3.方法名错误</p><p>4.返回类型错误</p><p>5.maven导出资源错误</p><p>本项目运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/op.png" alt="op"></p><p>正常运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/A4AE3C46FBCCE3F7401EBD832F8339D8.jpg" alt="img"></p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><p>namespace中的包名要与Dao/Mapper接口的包名一致</p><p>原始表如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/po.png" alt="po"></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>选择、查询语句</p><ul><li>id：就是对应的namespace中的方法名</li><li>reultType:Sql语句执行的返回值</li><li>parameter:参数类型</li></ul><p>根据id查询用户</p><p>首先在UserMapper.xml添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.kun.pojo.User&quot;&gt;</span><br><span class="line">        select *  from mybatis.user where id&#x3D;#&#123;id&#125;;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>然后在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根据id查询用户</span><br><span class="line">  User getUserById(int id);</span><br></pre></td></tr></table></figure><p>在UserDaoTest里面增加测试类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void getUserById() &#123;</span><br><span class="line">        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">        User user &#x3D;mapper.getUserById(1);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/$N%7BL_FCER6NFAH%7BC_28%7DGUH.png" alt="img"></p><p>插入用户信息</p><p>首先在UserMapper.xml添加下面代码 </p>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;com.kun.pojo.User&quot; &gt;</span><br><span class="line">        insert into  mybatis.user (id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">  &lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><p>然后在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;insert插入一个用户</span><br><span class="line">  int addUser(User user);</span><br></pre></td></tr></table></figure><p>在UserDaoTest里面增加测试类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void addUser()&#123;</span><br><span class="line">        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">        UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">        int res&#x3D;mapper.addUser(new User(4,&quot;赵六&quot;,&quot;123456&quot;));</span><br><span class="line">        &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">        if(res&gt;0)&#123;</span><br><span class="line">            System.out.println(&quot;插入成功&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;提交事务</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/cy.png" alt="cy"></p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/nm.png" alt="nm"></p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>修改用户信息</p><p>首先在UserMapper.xml添加下面代码 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;com.kun.pojo.User&quot;&gt;</span><br><span class="line">       update mybatis.user set name&#x3D;#&#123;name&#125;,pwd&#x3D;#&#123;pwd&#125; where id&#x3D;#&#123;id&#125;;</span><br><span class="line">   &lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><p>然后在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改用户</span><br><span class="line">  int updateUser(User user);</span><br></pre></td></tr></table></figure><p>在UserDaoTest里面增加测试类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void updateUser()&#123;</span><br><span class="line">       SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">       UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">       int res&#x3D;mapper.updateUser(new User(4,&quot;呵呵&quot;,&quot;123456&quot;));</span><br><span class="line">       &#x2F;&#x2F;关闭SqlSession</span><br><span class="line">       if(res&gt;0)&#123;</span><br><span class="line">           System.out.println(&quot;更新成功&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;提交事务</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/000.png" alt="000"></p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/00.png" alt="00"></p><p>删除用户信息</p><p>首先在UserMapper.xml添加下面代码 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">       delete  from mybatis.user where id&#x3D;#&#123;id&#125;;</span><br><span class="line">   &lt;&#x2F;delete&gt;</span><br></pre></td></tr></table></figure><p>然后在UserDao接口添加下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除用户</span><br><span class="line">int deleteUser(int id);</span><br></pre></td></tr></table></figure><p>在UserDaoTest里面增加测试类</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void deleteUser()&#123;</span><br><span class="line">       SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();</span><br><span class="line">       UserDao mapper &#x3D;sqlSession.getMapper(UserDao.class);</span><br><span class="line">       int res&#x3D;mapper.deleteUser(4);</span><br><span class="line">       if(res&gt;0)&#123;</span><br><span class="line">           System.out.println(&quot;删除成功&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       &#x2F;&#x2F;提交事务</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/999.png" alt="999"></p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/po1.png" alt="po1"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面英文释义</title>
      <link href="2021/05/31/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%8B%B1%E6%96%87%E9%87%8A%E4%B9%89/"/>
      <url>2021/05/31/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%8B%B1%E6%96%87%E9%87%8A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Div英文释义"><a href="#Div英文释义" class="headerlink" title="Div英文释义"></a>Div英文释义</h2><p>标题：title        字体：font      身体：body      大小：size           列表：list</p><p>文本：text        样式：style     对齐：align      图像：image       修饰：decoration</p><p>资源：source   线/行：line          宽度：width     穿过：through    高度：height</p><p>缩进：indent    主题：main          斜体：italic      链接：link             加粗：bold</p><p>加重：weight    顶部：top      输入：input     下面的：under     背景：background</p><h1 id="CSS英文释义"><a href="#CSS英文释义" class="headerlink" title="CSS英文释义"></a>CSS英文释义</h1><p>重复：repeat         填充：padding             位置：position   正常：normal    显示类型：display</p><p>父级：parent         显示可见：visibility     子级：children   隐藏：hidden    顶部导航：topnav</p><p>显示：visible          导航：nav                     溢出：overflow  图片：banner   列表：list</p><p>行高：line-height  样式：style                   边界：margin     边框：border   页眉：header</p><h1 id="功能英文释义"><a href="#功能英文释义" class="headerlink" title="功能英文释义"></a>功能英文释义</h1><p>标志：logo       服务：service  滚动：scroll      加入：joinus  广告：banner   指南：guild  标签页：tab 状态：status  登录：login</p><p>登录条：loginbar 按钮：btn    注册：register  热点：bot   当前的：current 新闻：news  搜索：search  下载：download 小技巧：tips</p><p>版权：copyright   功能区：shop投票：vote      图标：icon  标题：title 文章列表：list 合作伙伴：partner 提示信息：msg   注释：note</p><h1 id="导航英文释义"><a href="#导航英文释义" class="headerlink" title="导航英文释义"></a>导航英文释义</h1><p>导航：nav   主导航：mainbav  子导航：subnav   项导航：topnav   边导航：sidebar  标题：title</p><p>左导航：leftsidebar   右导航：rightsidebar  菜单：menu  子菜单：submenu  摘要：summary</p><h1 id="页面结构英文释义"><a href="#页面结构英文释义" class="headerlink" title="页面结构英文释义"></a>页面结构英文释义</h1><p>容器：container    页头：header   内容：content  页面主题：main   页尾：footer</p><p>导航：nav   侧栏：sidebar  栏目：column  页面外围控制布局宽度：wrapper</p><p>​                 left</p><p>左中右：center</p><p>​                right</p><h2 id="样式文件的命名"><a href="#样式文件的命名" class="headerlink" title="样式文件的命名"></a>样式文件的命名</h2><p>主要的：master.css     模块：module.css   基本共用：base.css   布局：layout.css   主题：themes.css</p><p>专栏：columns.css      文字：font.css      表单：forms.css            补丁：mend.css    打印：print.css</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遍历二叉树</title>
      <link href="2021/05/30/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/05/30/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>遍历二叉树是指按某条搜索路径巡访树中每个结点，使得每个结点均被访问一次，而且仅被访问一次。访问的含义很广，可以是对结点做各种处理，包括输出结点的信息，对结点进行运算和修改等。遍历二叉树常用的三种操作分别是前序遍历(DLR)、中序遍历(LDR)、后序遍历(LRD)。</p><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p>若二叉树为空，则空操作；否则</p><p>（1）访问根结点；</p><p>（2）先序遍历左子树；</p><p>（3）先序遍历右子树；</p><p><strong>根左右</strong></p><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>若二叉树为空，则空操作；否则</p><p>（1）中序遍历左子树；</p><p>（2）访问根结点；</p><p>（3）中序遍历右子树；</p><p><strong>左根右</strong></p><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>若二叉树为空，则空操作；否则</p><p>（1）后序遍历左子树；</p><p>（2）后序遍历右子树；</p><p>（3）访问根结点；</p><p><strong>左右根</strong></p><h2 id="根据二叉树写出具体序列"><a href="#根据二叉树写出具体序列" class="headerlink" title="根据二叉树写出具体序列"></a>根据二叉树写出具体序列</h2><h3 id="具体实例1"><a href="#具体实例1" class="headerlink" title="具体实例1"></a>具体实例1</h3><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/%60K6OJ0%5D1Y%5BUFQYF0U@%5DM@4V.png" alt="img"></p><p>前序遍历(DLR)：+&amp;&amp;/ABCDE</p><p>中序遍历(LDR)：A/B&amp;C&amp;D+E</p><p>后序遍历(LRD)：AB/C&amp;D&amp;E+</p><h3 id="具体实例2"><a href="#具体实例2" class="headerlink" title="具体实例2"></a>具体实例2</h3><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/456.png" alt="456"></p><p>前序遍历(DLR)：ABCDEFGH</p><p>中序遍历(LDR)：BDCEAFGH</p><p>后序遍历(LRD)：DECBHGFA</p><h2 id="知道前序遍历与中序遍历求后序遍历"><a href="#知道前序遍历与中序遍历求后序遍历" class="headerlink" title="知道前序遍历与中序遍历求后序遍历"></a>知道前序遍历与中序遍历求后序遍历</h2><p>例：某二叉树的前序遍历序列为abdgcefh，中序遍历序列为dgbaechf，求后序遍历序列？</p><p>解析：由前序遍历的特征知a为根部，再结合中序遍历，得知bdg和echf分别为左子树和右子树，又dgb为中序遍历的结果，前序为bdg，所以b为右子树的根，dg为中序遍历的结果，d为根，g为d的右孩子，可根据上述分析画出二叉树，所以后序遍历的序列为gdbehfca。</p><h2 id="知道后序遍历与中序遍历求前序遍历"><a href="#知道后序遍历与中序遍历求前序遍历" class="headerlink" title="知道后序遍历与中序遍历求前序遍历"></a>知道后序遍历与中序遍历求前序遍历</h2><p>例：某二叉树的后序遍历序列为DBCEFGHA，中序遍历为EDCBAHFG，求前序遍历序列？</p><p>解析：首先看后序遍历，根据后序遍历的特征知A为根部，然后在中序遍历中找A的位置，则EDCB和HFG分别为左子树与右子树，重复前面两部的操作，从后序遍历的最后一位找，在中序遍历寻找对应点，可跟据上述分析画出二叉树，所以前序遍历序列为AECDBHGF。</p><h2 id="知道前序遍历与后序遍历不能求中序遍历"><a href="#知道前序遍历与后序遍历不能求中序遍历" class="headerlink" title="知道前序遍历与后序遍历不能求中序遍历"></a>知道前序遍历与后序遍历不能求中序遍历</h2><p>理由：因为知道前序遍历与后序遍历不能唯一确定一颗二叉树！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广度遍历与深度遍历</title>
      <link href="2021/05/28/%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86%E4%B8%8E%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86/"/>
      <url>2021/05/28/%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86%E4%B8%8E%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h1><h2 id="深度优先遍历的主要思想"><a href="#深度优先遍历的主要思想" class="headerlink" title="深度优先遍历的主要思想"></a>深度优先遍历的主要思想</h2><p>1、首先以一个未被访问过的顶点作为起始顶点，沿当前顶点的边走到未访问过的顶点；</p><p>2、当没有未访问过的顶点时，则回到上一个顶点，继续试探别的顶点，直至所有的顶点都被访问过。</p><h2 id="DFS具体实例"><a href="#DFS具体实例" class="headerlink" title="DFS具体实例"></a>DFS具体实例</h2><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/339DC650037FD3E19CA62B36AC649671.jpg" alt="img"></p><p>（1）从顶点v1出发，访问v1。</p><p>（2）在访问了顶点v1之后，选择第一个未被访问的邻接点v2，访问v2。以v2为新顶点，重复此步，访问v4、v8、v5。在访问完v5之后，由于v5的邻接点都已经被访问，此步结束。</p><p>（3）搜索从v5到v8，由于同样的理由，搜索继续回到v4，v2直至v1，此时由于v1的另一个邻接点未被访问，则搜索又从v1到v3，在继续进行下去。由此，得到的顶点访问序列为：</p><p>​                                                v1-v2-v4-v8-v5-v3-v6-v7</p><h1 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h1><h2 id="广度优先遍历的主要思想"><a href="#广度优先遍历的主要思想" class="headerlink" title="广度优先遍历的主要思想"></a>广度优先遍历的主要思想</h2><p>1.尽可能先对横向进行搜索。</p><p>2.设x和y是两个相继被访问过的顶点，若当前是以x为出发点进行搜索，则在访问x的所有未曾被访问过的邻接点之后，紧接着是以y为出发点进行横向搜索，并对搜索到y的邻接点中尚未被访问的顶点进行访问。也就是说，先访问的顶点其邻接点也先被访问。</p><h2 id="BFS具体实例"><a href="#BFS具体实例" class="headerlink" title="BFS具体实例"></a>BFS具体实例</h2><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/339DC650037FD3E19CA62B36AC649671.jpg" alt="img"></p><p>（1）从顶点v1出发，访问v1 。</p><p>（2）依次访问v1的各个未曾访问过的邻接点v2和 v3。</p><p>（3）依次访问v2的邻接点v4和v5，以及v3的邻接点v6和v7，最后访问v4的邻接点v8。由于这些顶点的邻接点均以被访问，并且图中所有顶点都被访问，由此完成了图的遍历。得到的顶点访问序列为：</p><p>​                                                                                     v1-v2-v3-v4-v5-v6-v7-v8</p><hr><h1 id="根据邻接表分别找出深度优先遍历序列与广度优先遍历序列"><a href="#根据邻接表分别找出深度优先遍历序列与广度优先遍历序列" class="headerlink" title="根据邻接表分别找出深度优先遍历序列与广度优先遍历序列"></a>根据邻接表分别找出深度优先遍历序列与广度优先遍历序列</h1><h2 id="具体实例1"><a href="#具体实例1" class="headerlink" title="具体实例1"></a>具体实例1</h2><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/3E46B8D0D760C82A8A5470DF0EB10010.jpg" alt="img"></p><p>从顶点0出发按深度优先遍历的序列是0123</p><p>从顶点0出发按广度优先遍历的序列是0321</p><h2 id="具体实例2"><a href="#具体实例2" class="headerlink" title="具体实例2"></a>具体实例2</h2><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/24E398CB46A8B846CDC379F4D55AD063.jpg" alt="img"></p><p>深度优先遍历过程如下：</p><p>0-&gt;1-&gt;4-&gt;8-&gt;5(回溯8),8-&gt;6-&gt;2-&gt;7(回溯0),0-&gt;3</p><p>所以对应的深度优先遍历序列为014856273</p><p>广度优先遍历过程如下：</p><p>0-&gt;1-&gt;2-&gt;3,1-&gt;4-&gt;5,2-&gt;6-&gt;7,4-&gt;8</p><p>所以对应的广度优先遍历序列为012345678</p><h2 id="具体实例3"><a href="#具体实例3" class="headerlink" title="具体实例3"></a>具体实例3</h2><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/325A5CE40B6680F8CDF45B46FB83AF5F.jpg" alt="img"></p><p>从顶点0出发的按深度优先遍历的序列是03241</p><p>从顶点0出发的按广度优先遍历的序列是03124</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树构造步骤及写出相应编码</title>
      <link href="2021/05/24/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%9E%84%E9%80%A0%E6%AD%A5%E9%AA%A4%E5%8F%8A%E5%86%99%E5%87%BA%E7%9B%B8%E5%BA%94%E7%BC%96%E7%A0%81/"/>
      <url>2021/05/24/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E6%9E%84%E9%80%A0%E6%AD%A5%E9%AA%A4%E5%8F%8A%E5%86%99%E5%87%BA%E7%9B%B8%E5%BA%94%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><p>注：哈夫曼树并不唯一，带权路径长度一定相同。并且图的深度遍历序列不是唯一的。</p><h1 id="哈夫曼树的构造步骤"><a href="#哈夫曼树的构造步骤" class="headerlink" title="哈夫曼树的构造步骤"></a>哈夫曼树的构造步骤</h1><h2 id="由给定结点构造哈夫曼树"><a href="#由给定结点构造哈夫曼树" class="headerlink" title="由给定结点构造哈夫曼树"></a>由给定结点构造哈夫曼树</h2><p>(1)5个结点的权值大小如下：<br>1 2 3 4 5</p><p>(2)从1 2 3 4 5五个结点中选出两个权值最小的。选出1 2，同时算出这两个结点的权值之和3。</p><p>(3)继续从3 4 5 3四个结点选出两个权值最小的。选出3 3，同时算出这两个结点的权值之和6。</p><p>(4)继续从4 5 6三个结点选出两个权值最小的。选出4 5，这是选出的两个数不是构造好的树里面的结点，需要在旁边新建一个分叉，并计算这两个结点的和9。</p><p>注：如果选出的两个数字都不是已经构造好的二叉树里面的结点，所以要另外开一棵二叉树；或者说，如果两个数的和正好是下一步的两个最小数的其中的一个，那么这个树直接往上生长就可以了，如果这两个数的和比较大，不是下一步的两个最小数的其中一个，那么就并列生长。</p><p>(5)最后选出6 9两个结点合并成为哈夫曼树。</p><p>如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524170030.png" alt="fms"></p><h2 id="根据哈夫曼树写出哈夫曼编码"><a href="#根据哈夫曼树写出哈夫曼编码" class="headerlink" title="根据哈夫曼树写出哈夫曼编码"></a>根据哈夫曼树写出哈夫曼编码</h2><p>根据构造的哈夫曼树</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524170339.jpg" alt="fmsm"></p><p>6： 0，3：00(左)，3：01(右)，9：1，4：10，5：11，1：000，2：001</p><h2 id="wpl的计算"><a href="#wpl的计算" class="headerlink" title="wpl的计算"></a>wpl的计算</h2><p>从根部开始，根为第0层，依次往下累加，将对应层数与权值相乘在累加的到结果。</p><p>wpl=1X3+2X3+3X2+4X2+5X2=33</p><p>在问题中，wpl有多种问法，例如求哈夫曼树的带权路径长度；求哈夫曼树的长度，这两个问法一样，只需对应的权值乘以对应的层数，并且权值只出现一次！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈夫曼树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/20/hello-world/"/>
      <url>2021/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven项目入门</title>
      <link href="2021/05/06/Maven%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>2021/05/06/Maven%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Maven是什么"><a href="#一、Maven是什么" class="headerlink" title="一、Maven是什么"></a>一、Maven是什么</h1><p>Maven是Apache下的一个纯java开发的开源项目，它是一个项目管理工具，使用maven对java项目进行构建、依赖管理。</p><p>通俗的来说Maven就是一款帮助程序员构建项目的工具，我们只需要告诉Maven需要哪些Jar 包，它会帮助我们下载所有的Jar，极大提升开发效率。</p><h1 id="二、Maven的安装及配置"><a href="#二、Maven的安装及配置" class="headerlink" title="二、Maven的安装及配置"></a>二、Maven的安装及配置</h1><h2 id="1-Maven本地安装"><a href="#1-Maven本地安装" class="headerlink" title="1.Maven本地安装"></a>1.Maven本地安装</h2><p>去apache官网下载，选择二进制的包</p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h2><p>找到Path里添加meven的安装路径，例如我的是F:\apache-maven-3.8.1\bin</p><p>在用户变量中添加M2_HOME变量,变量值为F:\apache-maven-3.8.1</p><p>然后检验打开cmd输入mvn  -v</p><p>结果会显示</p><p>Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)<br>Maven home: F:\apache-maven-3.8.1\bin..<br>Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.8.0_201\jre<br>Default locale: zh_CN, platform encoding: GBK<br>OS name: “windows 10”, version: “10.0”, arch: “amd64”, family: “windows”</p><p>类似上面的语句，如果出现那么成功</p><h2 id="3-修改maven配置文件"><a href="#3-修改maven配置文件" class="headerlink" title="3.修改maven配置文件"></a>3.修改maven配置文件</h2><p>maven会将从中央仓库下载的jar包放到本地仓库中，而这个本地仓库其实就是maven帮我们建立的一个文件夹，目录为C:\Users\你的用户名.m2\repository，这个路径是可以修改的；我们修改到F盘。</p><p>方法：找到下载好的maven文件下的conf目录，找到settings.xml文件，将路径修改。</p><p><localRepository>F:\repository</localRepository></p><p>只需添加上面那一句如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/lk.png" alt="lk"></p><p>配置中央仓库镜像</p><p>在settings.xml文件中找的mirrors标签中添加子标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 中央仓库1 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 中央仓库2 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下载资源</p><p>打开cmd输入mvp help:system</p><p>开始下载，这样你会发现你的仓库里面有东西了</p><h1 id="三、创建项目"><a href="#三、创建项目" class="headerlink" title="三、创建项目"></a>三、创建项目</h1><p>点击FILE —-new Project选择maven，然后webapp那个然后输入路径名称什么的，注意，有个Maven home directory 需要填写你自己下载的文件路径,如F:\apache-maven-3.8.1，最后点击next等操作后创建完成，之后idea会生成一系列配置文件，过程会需要一段时间。</p><p>选择其中的index.jsp运行，结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/fm.png" alt="fm"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 偷懒神器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MybatisPlus入门</title>
      <link href="2021/05/05/MybatisPlus%E5%85%A5%E9%97%A8/"/>
      <url>2021/05/05/MybatisPlus%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>使用第三方插件：</p><p>1.导入对应的依赖</p><p>2.研究依赖如何配置</p><p>3.代码如何编写</p><p>4.提升扩展能力技术</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>1.创建数据库<code>mybatis_plus</code></p><p>2.创建user表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>3.编写项目，初始化项目</p><p>新建一个springboot项目，点击spring Intializr进行创建，选择java8的环境</p><p>初始化完毕后，需要删除多余的文件，需要删除.gitignore、HELP.md、mvnw、mvnw.cmd</p><p>4.导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatics-plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：我们mybatis-plus可以节省我们大量的代码，尽量不要同时导入mybatis与mybatis-plus版本差异</p><p>5.连接数据库与mybatis一样</p><p>点击src目录下的main找到resorces进入application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql  5  驱动不同，如果为8需要加入时区配置，并且要改为com.mysql.cj.jdbc.Driver,</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;&amp;useUnicode=true&amp;&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"># mysql 8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;&amp;useUnicode=true&amp;&amp;characterEncoding=utf-8&amp;&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将上边代码复制进去。</p><p>注：强烈建议使用mysql 8的驱动，不然最后结果可能会出错。会提示Loading class <code>com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is </code>com.mysql.cj.jdbc.Driver’. The driver is automatical。意思是mysql 5不让用了</p><p>连接数据库：</p><p>点击项目右边的database，并点击左上角的+号，选择mysql ，输入用户名和密码，点击test connection验证是否成功</p><p>注： 6.传统方式pojo-dao(连接mybatis，配置mapper.xml文件)-service-controller</p><p>6.使用了mybatis-plus之后，不需要配置过多的文件</p><p>在java目录下创建一个包pojo,创建一个java类user类。继续在该目录下创建一个mapper包，在该包下创建一个usermapper接口继承BaseMapper接口</p><p>pojo</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import lombok.AllArgsConstructor;</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line">    private Long id;</span><br><span class="line">    private String name;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>mapper</p><figure class="highlight plain"><figcaption><span>mapper接口</span></figcaption><table><tr><td class="code"><pre><span class="line">import com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line">import com.kun.pojo.User;</span><br><span class="line">import org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在对应的Mapper实现基本的类 BaseMapper</span><br><span class="line">@Repository    &#x2F;&#x2F;代表持久层dao层</span><br><span class="line">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;所有的增删改查已经编写完成</span><br><span class="line">&#125;</span><br><span class="line">注意：需要在主启动类上去扫描我们的mapper包下的所有接口@MapperScan(&quot;com.kun.mapper&quot;)</span><br></pre></td></tr></table></figure><p>测试类中测试</p><figure class="highlight plain"><figcaption><span>测试类中测试</span></figcaption><table><tr><td class="code"><pre><span class="line">import com.kun.mapper.UserMapper;</span><br><span class="line">import com.kun.pojo.User;</span><br><span class="line">import org.junit.jupiter.api.Test;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@SpringBootTest</span><br><span class="line">class MabatisPlusApplicationTests &#123;</span><br><span class="line">    &#x2F;&#x2F;继承了BaseMapper,所有的方法都来自父类，也可编写自己的扩展方法</span><br><span class="line">   @Autowired</span><br><span class="line">   private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    void contextLoads() &#123;</span><br><span class="line">        &#x2F;&#x2F;参数是一个Wrapper，条件构造器,这里先不用，null</span><br><span class="line">        &#x2F;&#x2F;查询全部用户</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users &#x3D; userMapper.selectList(null);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210523202933.png" alt="img"></p><p>成功查询</p><h1 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h1><p>我们的所有sql现在是不可见的，希望知道它是怎么执行的，所以我们必须要看日志！</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis-plus.configuration.log-impl&#x3D;org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524124711.jpg" alt="666"></p><p>配置完毕后，后面的学习就需要注意这个自动生成SQL。</p><h1 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h1><h2 id="insert插入"><a href="#insert插入" class="headerlink" title="insert插入"></a>insert插入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试插入</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">       User user = <span class="keyword">new</span> User();</span><br><span class="line">       user.setName(<span class="string">&quot;李青&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">15</span>);</span><br><span class="line">       user.setEmail(<span class="string">&quot;1234234@qq.com&quot;</span>);</span><br><span class="line">       userMapper.insert(user);<span class="comment">//自动生成id</span></span><br><span class="line">       <span class="keyword">int</span> result=userMapper.insert(user);<span class="comment">//帮我们自动生成ID</span></span><br><span class="line">       System.out.println(result);<span class="comment">//受影响的行数</span></span><br><span class="line">       System.out.println(user);<span class="comment">//发现id自动回填</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524161510.png" alt="is"></p><p>数据库插入的id默认值为：全局的唯一id</p><h2 id="主键生成策略"><a href="#主键生成策略" class="headerlink" title="主键生成策略"></a>主键生成策略</h2><p>雪花算法：</p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的id。其核心思想是：使用41bit作为毫米数，10bit作为机器的id(5个bit是数据中心，5个bit是机器id)，12bit作为毫秒内的流水号(意味着每个节点在每个毫秒内可产生4096个id)最后还有一个符号位，永远是0。可以保证全球唯一！</p><p>主键自增</p><p>我们需要配置主键自增：</p><p>1.字体类字段加上@TableId(type = IdType.Auto)</p><p>2.数据库字段一定要自增</p><p>3.再次测试插入</p><p>其它的源码解释</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span></span>&#123;</span><br><span class="line">    AUTO(<span class="number">0</span>),<span class="comment">//数据库ID自增</span></span><br><span class="line">    NONE(<span class="number">1</span>),<span class="comment">//未设置主键</span></span><br><span class="line">    INPUT(<span class="number">2</span>),<span class="comment">//手动输入</span></span><br><span class="line">    ID_WORKER(<span class="number">3</span>),<span class="comment">//默认的全局id</span></span><br><span class="line">    UUID(<span class="number">4</span>),全局唯一id UUid</span><br><span class="line">    ID_WORKER_STR(<span class="number">5</span>)<span class="comment">//ID_WORKER字符串表示法</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p><h2 id="update更新"><a href="#update更新" class="headerlink" title="update更新"></a>update更新</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新测试</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">5L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i=userMapper.updateById(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524142509.png" alt="up"></p><h2 id="Delete删除操作"><a href="#Delete删除操作" class="headerlink" title="Delete删除操作"></a>Delete删除操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除测试</span></span><br><span class="line"><span class="comment">//测试删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">int</span> i=userMapper.deleteById(<span class="number">5L</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/pictures/img/20210524142530.png" alt="del"></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建个人图床</title>
      <link href="2021/05/05/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>2021/05/05/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="一、软件准备"><a href="#一、软件准备" class="headerlink" title="一、软件准备"></a>一、软件准备</h1><p>Typora(用于博客文本编写)</p><p>PicGo(用于同步git图片仓库)</p><h1 id="二、搭建个人图床"><a href="#二、搭建个人图床" class="headerlink" title="二、搭建个人图床"></a>二、搭建个人图床</h1><h2 id="1-新建仓库"><a href="#1-新建仓库" class="headerlink" title="1.新建仓库"></a>1.新建仓库</h2><p>首先进入github新建个人仓库，如blogpicture。</p><h2 id="2-获取token"><a href="#2-获取token" class="headerlink" title="2.获取token"></a>2.获取token</h2><p>在个人头像那里，点击setting，选择Deployer settings，在私人令牌中，选择repo权限，然后提交</p><p>保存token即可</p><h2 id="3-PicGo设置"><a href="#3-PicGo设置" class="headerlink" title="3.PicGo设置"></a>3.PicGo设置</h2><p>参数说明：</p><p>仓库名：表示远程仓库地址，固定格式 Github用户名/仓库名，前期准备用到的仓库<br>分支名：表示分支，默认填入master，需要根据自己Github上的分支进行填写<br>Token：填入Github中生成的Token，上面已经讲解过Token获取<br>存储路径：可以自定义一个文件路径<br>自定义域名：建议使用<a href="https://cdn.jsdelivr.net/gh/Github%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/Github用户名/仓库名</a></p><h2 id="4-Typora设置"><a href="#4-Typora设置" class="headerlink" title="4.Typora设置"></a>4.Typora设置</h2><p>点击image，在when Insert下选择 Upload image,勾选4个A开头的，在image  Upload </p><p>Setting选择PicGo.app</p><h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><p>选择任意一张图片复制，然后粘贴在typora文本编辑中会生成一个网址，并且PicGo会提示上传成功，<br>根据网址可以通过浏览器访问图片，如<a href="https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/ch.jpg%E3%80%82">https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/ch.jpg。</a><br><img src="https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/ch.jpg" alt="ch"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp项目之连接数据库</title>
      <link href="2021/04/28/jsp%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/04/28/jsp%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、连接数据库步骤-以IDEA为例"><a href="#一、连接数据库步骤-以IDEA为例" class="headerlink" title="一、连接数据库步骤(以IDEA为例)"></a>一、连接数据库步骤(以IDEA为例)</h1><p>1.安装数据驱动的jar包。<br>2.找到安装Tomcat文件，找到lib文件夹，将下载好jdbc驱动jar包复制进去。<br>3.右键点击File,接着点击ProjectStructure或者使用快捷件Ctrl+alt+shift+s调用。<br>点击Libraries并点击右上的+号，选择Java将你下载的Jdbc驱动找到，点击OK。</p><h1 id="二、连接数据库代码"><a href="#二、连接数据库代码" class="headerlink" title="二、连接数据库代码"></a>二、连接数据库代码</h1><p>代码如下：<br>Connection con;<br>Statement stmt;<br>ResultSet rs;<br> Class.forName(“com.mysql.jdbc.Driver”);<br>String url=”jdbc:mysql://localhost:3306/student”;<br>con=DriverManager.getConnection(“url”,”root”,”admin”);//root指的是数据库名，admin指的是密码。<br>stmt=con.createStatement();<br>String sql=”sql语句”//select或delete或insert或update语句<br>rs=stmt.exectuteQuery(sql)或者rs=stmt.executeUpdate(sql);</p><h1 id="三、具体实例"><a href="#三、具体实例" class="headerlink" title="三、具体实例"></a>三、具体实例</h1><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;查询会员信息&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;#f5f5dc&quot;&gt;</span><br><span class="line">&lt;div align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;2&quot;&gt;                                    </span><br><span class="line">&lt;tr align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;th colspan&#x3D;&quot;5&quot;&gt;&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">&lt;th&gt;会员名称&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;会员性别&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;会员邮箱&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;会员电话&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;会员学历&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">      Connection con;</span><br><span class="line">      java.sql.Statement stmt;</span><br><span class="line">      ResultSet rs;</span><br><span class="line">      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">      con&#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student&quot;,&quot;student&quot;,&quot;123456&quot;);</span><br><span class="line">      stmt&#x3D;con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">      rs&#x3D;stmt.executeQuery(&quot;select *from hy&quot;);</span><br><span class="line">      while(rs.next())&#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;%&#x3D;rs.getString(&quot;mc&quot;)%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;%&#x3D;rs.getString(&quot;sex&quot;)%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;%&#x3D;rs.getString(&quot;xx&quot;)%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;%&#x3D;rs.getString(&quot;tel&quot;)%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;&lt;%&#x3D;rs.getString(&quot;xl&quot;)%&gt;&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yankuncui/blogpicture/img/sjk.png" alt="sjk"></p><p>注：添加信息，修改信息，删除信息与上篇文章类似，可以根据需要简单修改。<br>本例是为了方便之后jsp项目连接数据库。</p>]]></content>
      
      
      <categories>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java项目之连接数据库</title>
      <link href="2021/04/26/Java%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>2021/04/26/Java%E9%A1%B9%E7%9B%AE%E4%B9%8B%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一、连接数据库步骤-以eclipse为例"><a href="#一、连接数据库步骤-以eclipse为例" class="headerlink" title="一、连接数据库步骤(以eclipse为例)"></a>一、连接数据库步骤(以eclipse为例)</h1><p>1.首先需要安装一个驱动的jar包。<br>2.然后右键点击所创的Java项目，点击build path之后继续点击Add External Archieves，找到<br>  你安装的jar包，点击打开。<br>3.编写连接数据库的代码，进行增删改查。</p><h1 id="二、连接数据库的Java代码块"><a href="#二、连接数据库的Java代码块" class="headerlink" title="二、连接数据库的Java代码块"></a>二、连接数据库的Java代码块</h1><p>代码如下：<br>Connection con;<br>Statement stmt;<br>ResultSet rs;<br> Class.forName(“com.mysql.jdbc.Driver”);<br>String url=”jdbc:mysql://localhost:3306/student”;<br>con=DriverManager.getConnection(“url”,”root”,”admin”);//root指的是数据库名，admin指的是密码。<br>stmt=con.createStatement();<br>String sql=”sql语句”//select或delete或insert或update语句<br>rs=stmt.exectuteQuery(sql)或者rs=stmt.executeUpdate(sql);</p><h1 id="三、具体实例"><a href="#三、具体实例" class="headerlink" title="三、具体实例"></a>三、具体实例</h1><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection con;</span><br><span class="line">java.sql.Statement stmt;</span><br><span class="line">ResultSet rs;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">&#125;catch (ClassNotFoundException ex) &#123;</span><br><span class="line">System.out.println(&quot;error:&quot;+ex);</span><br><span class="line">&#125;</span><br><span class="line">try &#123;</span><br><span class="line">con&#x3D;DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student&quot;,&quot;student&quot;,&quot;123456&quot;);</span><br><span class="line"> stmt&#x3D;con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);</span><br><span class="line"> rs&#x3D;stmt.executeQuery(&quot;select *from sb&quot;);</span><br><span class="line">rs.last();</span><br><span class="line">int k&#x3D;rs.getRow();</span><br><span class="line"> if(k&#x3D;&#x3D;0) &#123;</span><br><span class="line">JOptionPane.showMessageDialog(this,&quot;你查询的表为空表&quot;,&quot;系统提示&quot;,JOptionPane.WARNING_MESSAGE);</span><br><span class="line">&#125;</span><br><span class="line">rs.beforeFirst();</span><br><span class="line">String ob[][]&#x3D;new String[k][6];</span><br><span class="line">for(int i&#x3D;0;(i&lt;k)&amp;&amp;(rs.next());i++) &#123;</span><br><span class="line">ob[i][0]&#x3D;rs.getString(&quot;sbid&quot;);</span><br><span class="line">ob[i][1]&#x3D;rs.getString(&quot;sblb&quot;);</span><br><span class="line">ob[i][2]&#x3D;rs.getString(&quot;dt&quot;);</span><br><span class="line">ob[i][3]&#x3D;rs.getString(&quot;sname&quot;);</span><br><span class="line">ob[i][4]&#x3D;rs.getString(&quot;sbzt&quot;);</span><br><span class="line">ob[i][5]&#x3D;rs.getString(&quot;sbbm&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String s[]&#x3D; &#123;&quot;设备编号&quot;,&quot;设备类别&quot;,&quot;出厂日期&quot;,&quot;设备名称&quot;,&quot;设备状态&quot;,&quot;设备所属部门&quot;&#125;;</span><br><span class="line">jt&#x3D;new JTable(ob,s);</span><br><span class="line">jt.setSize(700,700);</span><br><span class="line">JScrollPane jsp&#x3D;new JScrollPane(jt);</span><br><span class="line">jsp.setPreferredSize(new Dimension(jt.getWidth()-100,jt.getHeight()-100));</span><br><span class="line">p1.add(jsp,&quot;Center&quot;);</span><br><span class="line">con.close();</span><br><span class="line">&#125;catch(Exception e) &#123;</span><br><span class="line">e.printStackTrace(); </span><br><span class="line">&#125;</span><br><span class="line">this.add(p1);</span><br><span class="line">p1.setVisible(true);</span><br><span class="line">this.setVisible(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加信息"><a href="#增加信息" class="headerlink" title="增加信息"></a>增加信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection conn;</span><br><span class="line">Statement stmt;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">conn&#x3D;DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student&quot;,&quot;student&quot;,&quot;123456&quot;);</span><br><span class="line">stmt&#x3D;conn.createStatement();</span><br><span class="line">String sbid&#x3D;jt[0].getText();            </span><br><span class="line">String sblb&#x3D; jt[1].getText();</span><br><span class="line">String dt&#x3D;jt[2].getText();</span><br><span class="line">String sname&#x3D;jt[3].getText()；</span><br><span class="line">String sbzt&#x3D;jt[4].getText();</span><br><span class="line">String sbbm&#x3D;jt[5].getText();</span><br><span class="line">String sql&#x3D;&quot;insert into sb &quot;+&quot; (sbid,sblb,dt,sname,sbzt,sbbm)&quot;+&quot;values(&#39;&quot;+sbid+&quot;&#39;,&#39;&quot;+sblb+&quot;&#39;,&#39;&quot;+dt+&quot;&#39;,&#39;&quot;+sname+&quot;&#39;,&#39;&quot;+sbzt+&quot;&#39;,&#39;&quot;+sbbm+&quot;&#39;)&quot;;</span><br><span class="line">stmt.executeUpdate(sql); </span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="删除信息"><a href="#删除信息" class="headerlink" title="删除信息"></a>删除信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection conn;</span><br><span class="line">Statement stmt;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">conn&#x3D;DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student&quot;,&quot;student&quot;,&quot;123456&quot;);</span><br><span class="line">stmt&#x3D;conn.createStatement();</span><br><span class="line">String sbid&#x3D;jt[0].getText();            </span><br><span class="line">String sblb&#x3D; jt[1].getText();</span><br><span class="line">String dt&#x3D;jt[2].getText();</span><br><span class="line">String sname&#x3D;jt[3].getText();            </span><br><span class="line">String sbzt&#x3D; jt[4].getText();</span><br><span class="line">String sbbm &#x3D;jt[5].getText();</span><br><span class="line">String sql&#x3D;&quot;delete from sb where sbid&#x3D;&#39;&quot;+sbid+&quot;&#39;&quot;;</span><br><span class="line">stmt.executeUpdate(sql); </span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><h2 id="修改信息"><a href="#修改信息" class="headerlink" title="修改信息"></a>修改信息</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connection conn;</span><br><span class="line">Statement stmt;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">conn&#x3D;DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student&quot;,&quot;student&quot;,&quot;123456&quot;);</span><br><span class="line">stmt&#x3D;conn.createStatement();</span><br><span class="line">String sbid&#x3D;jt[0].getText();            </span><br><span class="line">String sblb&#x3D; jt[1].getText();</span><br><span class="line">String dt&#x3D;jt[2].getText();</span><br><span class="line">String sname&#x3D;jt[3].getText();</span><br><span class="line">String sbzt&#x3D;jt[4].getText();</span><br><span class="line">String sbbm&#x3D;jt[5].getText();</span><br><span class="line">String sql&#x3D;&quot;update sb set sbid&#x3D;&#39;&quot;+sbid+&quot;&#39;,sblb&#x3D;&#39;&quot;+sblb+&quot;&#39;,dt&#x3D;&#39;&quot;+dt+&quot;&#39;,sname&#x3D;&#39;&quot;+sname+&quot;&#39;,sbzt&#x3D;&#39;&quot;+sbzt+&quot;&#39;,sbbm&#x3D;&#39;&quot;+sbbm+&quot;&#39; </span><br><span class="line">where sbid&#x3D;&#39;&quot;+sbid+&quot;&#39;&quot;;</span><br><span class="line">stmt.executeUpdate(sql); </span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure><p>注：本例是以实验室设备信息建表进行增删改查操作，其中查询将得到的信息建表后加入到面板中<br>，然后增删改代码执行过后，通过再次调用查询类查看进行增删改操作后的表信息。本例是为了方便<br>之后Java项目连接数据库。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心算法</title>
      <link href="2021/04/18/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/18/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、贪心算法的基本思想"><a href="#一、贪心算法的基本思想" class="headerlink" title="一、贪心算法的基本思想"></a>一、贪心算法的基本思想</h1><p>贪心算法是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，<br>不从整体最优上加以考虑，它所做出的仅是在某种意义上的局部最优解。用局<br>部解构造全局解，即从问题的某一个初始解逐步逼近给定的目标，以尽可能快<br>的求得更好的解。当某个算法中的某一步不能再继续前进时，算法停止。</p><hr><h1 id="二、贪心算法存在问题"><a href="#二、贪心算法存在问题" class="headerlink" title="二、贪心算法存在问题"></a>二、贪心算法存在问题</h1><p>(1)不能保证解释最佳的。因为贪心算法总是从局部出发，并没有从整体考虑。<br>(2)贪心算法一般用来解决求最大或最小解。<br>(3)贪心算法只能确定某些问题的可行性范围。</p><hr><h1 id="三、贪心算法的实现过程"><a href="#三、贪心算法的实现过程" class="headerlink" title="三、贪心算法的实现过程"></a>三、贪心算法的实现过程</h1><p>贪心算法的核心问题是选择能产生问题最优解的最优度量标准，即贪心策略。<br>所谓贪心策略是指从问题的.初始状态出发，通过若干次的贪心选择而得出最<br>优值的一种解题方法，其具体的实现<br>过程如下：<br>(1)应用同一规则，将原问题变为一个相似的但规模更小的子问题。<br>(2)从问题的某一初始解出发：<br>      while （能朝给定目标前进一步）<br>              求出可行解的一个解元素<br>(3)由所有解元素组合成问题的一个可行解</p><h2 id="四、具体实例"><a href="#四、具体实例" class="headerlink" title="四、具体实例"></a>四、具体实例</h2><p>有N堆纸牌，编号分别为1，2，…，n。每堆上有若干张,但纸牌总数必为n的倍数.<br>可以在任一堆上取若干张纸牌,然后移动。移牌的规则为：在编号为1上取的纸牌，<br>只能移到编号为2的堆上；在编号为n的堆上取的纸牌，只能移到编号为n-1的堆上；<br>其他堆上取的纸牌，可以移到相邻左边或右边的堆上。现在要求找出一种移动方法，<br>用最少的移动次数使每堆上纸牌数都一样多。例如：n=4，4堆纸牌分别为：<br>① 9 ② 8 ③ 17 ④ 6 移动三次可以达到目的：从③取4张牌放到④<br> 再从③区3张放到②然后从②去1张放到①。</p><p>样例输入<br>4<br>9 8 17 6<br>样例输出<br>3</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Greedy &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">  int n &#x3D; 0, avg &#x3D;0, s &#x3D; 0;</span><br><span class="line">  Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">  ArrayList&lt;Integer&gt; array &#x3D; new ArrayList&lt;Integer&gt;();</span><br><span class="line">  System.out.println(&quot;Please input the number of heaps:&quot;);</span><br><span class="line">  n &#x3D; scanner.nextInt();</span><br><span class="line">  System.out.println(&quot;Please input heap number:&quot;);</span><br><span class="line">  for (int i &#x3D; 0; i &lt; n; i++) &#123;</span><br><span class="line">   array.add(scanner.nextInt());</span><br><span class="line">  &#125;</span><br><span class="line">  for(int i &#x3D; 0; i &lt; array.size(); i ++)&#123;</span><br><span class="line">   avg +&#x3D; array.get(i);</span><br><span class="line">  &#125;</span><br><span class="line">  avg &#x3D; avg&#x2F;array.size();</span><br><span class="line">  System.out.println(array.size());</span><br><span class="line">  System.out.println(avg);</span><br><span class="line">  for(int i &#x3D; 0; i &lt; array.size()-1; i ++)&#123;</span><br><span class="line">   s++;</span><br><span class="line">   array.set(i+1, array.get(i+1)+array.get(i)-avg);   </span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(&quot;s:&quot; + s);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举算法</title>
      <link href="2021/04/17/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/17/%E6%9E%9A%E4%B8%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一、枚举算法的思想"><a href="#一、枚举算法的思想" class="headerlink" title="一、枚举算法的思想"></a>一、枚举算法的思想</h1><h2 id="枚举算法的定义"><a href="#枚举算法的定义" class="headerlink" title="枚举算法的定义"></a>枚举算法的定义</h2><p>在进行归纳推理时，如果逐个考察了某类事件的所有可能情况，因而得出一般结论，那么该结论是可靠 的，<br>这种归纳方法叫做枚举法。</p><h2 id="枚举算法的思想"><a href="#枚举算法的思想" class="headerlink" title="枚举算法的思想"></a>枚举算法的思想</h2><p>将问题的所有可能的答案一一列举，然后根据条件判断此答案是否合适，保留合适的，舍弃不合适的。</p><h2 id="使用枚举算法解题的基本思路"><a href="#使用枚举算法解题的基本思路" class="headerlink" title="使用枚举算法解题的基本思路"></a>使用枚举算法解题的基本思路</h2><p>（1）确定枚举对象、范围和判定条件。<br>（2）逐一枚举可能的解并验证每个解是否是问题的解。</p><h2 id="枚举算法步骤"><a href="#枚举算法步骤" class="headerlink" title="枚举算法步骤"></a>枚举算法步骤</h2><p>（1）确定解题的可能范围，不能遗漏任何一个真正解，同时避免重复。<br>（2）判定是否是真正解的方法。<br>（3）为了提高解决问题的效率，使可能解的范围将至最小。</p><hr><h1 id="二、算法实例"><a href="#二、算法实例" class="headerlink" title="二、算法实例"></a>二、算法实例</h1><p>题目描述<br>观察数字：12321，123321都有一个共同的特征，无论从左往右读，还是从右往左读，都是相同的，<br>上述数字称为回文数字。</p><p>现在要从5位或6位的十进制数字中找出各个位数之后等n的回文数字。</p><p>输入格式<br>输入一个整数n(10&lt;n&lt;=100)</p><p>输出格式<br>输出所有个位数之和等于n的5位和6位整数，每个数字占一行，数字从小到大的顺序排列。<br>如果没有满足的数字，则输出-1。<br>样例输入<br>48</p><p>样例输出<br>699996<br>789987<br>798897<br>879978<br>888888<br>897798<br>969969<br>978879<br>987789<br>996699</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">int digit[6];</span><br><span class="line">bool jug(int x)&#123;</span><br><span class="line">int m&#x3D;0,sum&#x3D;0;</span><br><span class="line">while(x)&#123;</span><br><span class="line">digit[m++]&#x3D;x%10;</span><br><span class="line">sum+&#x3D;x%10;</span><br><span class="line">x&#x2F;&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">if(sum!&#x3D;n)&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;m&#x2F;2;i++)&#123;</span><br><span class="line">if(digit[i]!&#x3D;digit[m-1-i])</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">bool f&#x3D;false;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i&#x3D;10000;i&lt;1000000;i++)&#123;</span><br><span class="line">if(jug(i))&#123;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">f&#x3D;true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(!f)&#123;</span><br><span class="line">cout&lt;&lt;-1&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><p>题目描述<br>方程a^2+b^2+c^2=n，其中0&lt;a&lt;b&lt;c。请你求出它的所有解，结果按照<br>a的值从小到大输出。</p><p>输入格式<br>输入一个整数n，为方程等号右边的整数。</p><p>输出格式<br>输出若干行，每行包括三个空格隔开的整数，分别为a,b,c的值。</p><p>样例输入<br>1000</p><p>样例输出<br>6 8 30<br>10 18 24</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int a&#x3D;1;a * a&lt;&#x3D;n;a++)&#123;</span><br><span class="line">for(int b&#x3D;a+1;a * a+b * b&lt;&#x3D;n;b++)&#123;</span><br><span class="line">    for(int c&#x3D;b+1;a * a+b * b+c * c&lt;&#x3D;n;c++)&#123;</span><br><span class="line">    if(a * a+b * b+c * c&#x3D;&#x3D;n)</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return  0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>题目描述<br>给定一个n x m的矩阵A。求A中的一个非空子矩阵，使这个子矩阵<br>中的元素和最大。其中，A的子矩阵是指A中行和列均连续的一部分。</p><p>输入格式<br>输入的第一行包含两个整数<br>n,m(n&gt;=1,m&lt;=50),分别表示矩阵A的行数和列数，接下来n行，每行<br>m个整数，表示矩阵Aij(-1000&lt;=Aij&lt;=1000)。</p><p>输出格式<br>输出一行，每包含一个整数，表示A中最大的子矩阵中的元素和</p><p>样例输入<br>3 3<br>2 -4 1<br>-1 2 1<br>4 -2 2</p><p>样例输出<br>6</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int A[55][55];</span><br><span class="line">int main()&#123;</span><br><span class="line">int n,m,ans;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    ans&#x3D;-1005;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;0;j&lt;m;j++)&#123;</span><br><span class="line">cin&gt;&gt;A[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;i;j&lt;n;j++)&#123;</span><br><span class="line">for(int k&#x3D;0;k&lt;m;k++)&#123;</span><br><span class="line">for(int l&#x3D;k;l&lt;m;l++)&#123;</span><br><span class="line">int tmp&#x3D;0;</span><br><span class="line">for(int p&#x3D;i;p&lt;&#x3D;j;p++)&#123;</span><br><span class="line">for(int q&#x3D;k;q&lt;&#x3D;l;q++)&#123;</span><br><span class="line">tmp+&#x3D;A[p][q];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(tmp&gt;ans)&#123;</span><br><span class="line">ans&#x3D;tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">return  0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++算法常用函数</title>
      <link href="2021/04/16/C-%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/16/C-%E7%AE%97%E6%B3%95%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p>string.find(string a,pos)a是子字符串，pos是查找开始的位置，不填的话默认为0，这里<br>要注意，如果不存在要找到的东西，则返回string.npos；<br>string.length()返回string长度<br>string.substr(int start,int length)start是子字符串开始的位置，lenth是子字符串的长度;<br>string.resize(int)resize可以初始化string的大小，可以让string使用scanf以及类似char[];<br>的操作；</p><hr><h2 id="char大小写转换"><a href="#char大小写转换" class="headerlink" title="char大小写转换"></a>char大小写转换</h2><p>变为大写:char =toupper(char);<br>变为小写:char =tolower(char);<br>注:在头文件#include&lt;ctype.h&gt;下使用</p><hr><p>##字符串<br>to_string():将数字转换为string类型<br>reverse(y1,y2):将y1到y2范围的元素翻转<br>string.c.str():返回一个指向正规C字符串的指针，内容与本string串相同;<br>atoi:把一字符串转换为整数int atoi(const char *nptr);<br>对于string类型需要atoi(str.c_str))</p><hr><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>fill(a,a+n,6)将数组下标为0~n-1的元素赋值为6<br>next_permutation(a,a+n)全排列<br>sort(arr,arr+n)快速排序，默认从小到大</p><hr><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>vector.size() 返回vector的大小<br>vector.push_back(Elem) 在vector的最后压入元素；<br>vector.pop_back() 删除vector中最后一个元素；<br>vector.assign(begin, end) 清空容器，进行赋值操作；</p><hr><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set.insert(Elem) 在set中插入元素；<br>set.size() 返回set的大小<br>set.find(Elem) 如果找到返回迭代器，如果没有找到，返回set.end();<br>遍历set的操作:<br>set<T>::iterator iter = set.begin();<br>for(;iter!=set.end();iter++){<br>    //do something<br>    cout&lt;&lt;*iter&lt;&lt;endl;<br>}</p><hr><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map[Elem1]=Elem2在map中以数组的方式插入数据<br>map.find(Elem)查找成功返回iterator，失败则返回map.end();<br>map中每个元素的本质其实是pair&lt;Elem1, Elem2&gt;；pair是可以使用pair.first和pair.second<br>来表示第一个元素和第二个元素；当使用迭代器时，(*iterator).first是map的key，<br>(*iterator).second是map的value值；而在排序的时候，是无法直接对map使用sort，<br>我们可以考虑将map先转化为vector&lt;pair&lt;Elem1, Elem2&gt;&gt;来进行自定义排序。<br>其中，map和vector的转换代码为:<br>vector&lt;pair&lt;Elem1, Elem2&gt;&gt; temp(map.begin(),map.end());</p><hr><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><p>sort(a, a+length) a为第一个元素地址，length为需要排序的元素个数；<br>sort(vector.begin(), vector.end()) 这是vector排序；<br>sort(a, a+length, cmp) 其中cmp是自定一个的函数（bool cmp(a, b)）；<br>reverse(a, a+length) a为第一个元素地址，length为需要逆转的元素个数；<br>swap(a, b) 其中a，b可以是容器，可以是变量；<br>find(a, a+length, val) a为第一个元素的地址，length为查找范围，val是查找到值；<br>copy(a, a+length, b) a为输入元素地址，length为复制范围，b为输出元素首地址；<br>fill(a, a+length, val) a为初始化元素首地址，length为初始化范围，val为全部初始化的值；<br>注:在头文件 #include&lt; algorithm&gt;下使用</p><hr><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>fabs(double)取double的绝对值<br>abs(int)取int的绝对值<br>round(double)对double类型的四舍五入<br>sqrt(double)返回double的算术平方根<br>注:在头文件#include&lt;math.h&gt;下使用</p><hr><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>ceil(double a):向上取整<br>floor(double a):向下取整<br>count()存在于vector和string中，分别对单个数字和单个字符计数<br>count(v.begin,v.end(),n)统计v中n出现的个数</p><hr><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>sort(a, a+length) 一般是将a按照ascii码的顺序排序；<br>sort(a, a+length, cmp) 是需要自定义排序时候，按照自定义的方法排序；<br>cmp自定义函数示例如下:<br>//按照从小到大排序；<br>//其中假定是将vector<string> 排序，因此参数为string a和string b；<br>bool cmp(string a, string b){<br>    return a&lt;b;<br>}</p><hr><h2 id="最大值和最小值"><a href="#最大值和最小值" class="headerlink" title="最大值和最小值"></a>最大值和最小值</h2><p>int num[]={2,3,1,6,4,5};<br>cout&lt;&lt;”最小值是 “&lt;&lt;*min_element(num,num+6)&lt;&lt;endl;<br>cout&lt;&lt;”最大值是 “&lt;&lt;<em>max_element(num,num+6)&lt;&lt;endl;<br>//注意这个</em>，因为返回的是迭代器；<br>注:max(),min()分别求最大值与最小值</p><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>int gcd(int a, int b){<br>    return b == 0 ? a : gcd(b, a % b);<br>}</p><hr><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>int c = gcd(a, b);//最小公倍数可以利用最大公约数；<br>int lcm(int a, int b){<br>    return a*b/c;<br>}</p><hr><h2 id="set和vector之间的相互转化"><a href="#set和vector之间的相互转化" class="headerlink" title="set和vector之间的相互转化"></a>set和vector之间的相互转化</h2><p>//set初始化vector<br>vector.assign(set.begin, set.end());<br>//vector初始化set<br>set(vector.begin(), vector.end());</p><hr><h2 id="大数据的处理"><a href="#大数据的处理" class="headerlink" title="大数据的处理"></a>大数据的处理</h2><p>绝对值在10^9以内的整数要用int；<br>超过2*10^9要用long（10^18以内）；</p><hr><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><p>如果是多循环的输入输出，一般使用scanf和printf，这样会提高很多效率，以防止时间限制；<br>如果是输入输出单个固定，可以使用cin和cout；<br>如果需要格式的输出，一定使用printf；<br>万能头文件: #include&lt;bits/stdc++.h&gt;</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="2021/04/16/KMP/"/>
      <url>2021/04/16/KMP/</url>
      
        <content type="html"><![CDATA[<h1 id="一、KMP算法"><a href="#一、KMP算法" class="headerlink" title="一、KMP算法"></a>一、KMP算法</h1><p>在KMP算法中，对于每一个模式串都会事先计算出模式串的内部匹配信息，在匹配失败时最大的移动模式串，<br>以减少匹配次数，这样就很好的解决了BF算法的缺陷比如，当匹配失败后，最好是能够将模式字串尽量的右移<br>和主串进行匹配，右移的距离在KMP算法中是这样计算的：在已经匹配的字串中，找到最长的相同的前缀和后缀，<br>然后移动使他们重叠，这个位置就是j要回退的位置，这样j就不用每一次都回到0号位置了，每一次j回退的位置存<br>储在一个数组里，称之为next数组。</p><hr><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><p>获取next数组<br>代码<br>void GetNext(int *next,const char *sub)<br>{<br>    next[0] = -1;<br>    next[1] = 0;<br>    int lensub = strlen(sub);<br>    int i = 2;//当前的i<br>    int k = 0;//前一项的K值<br>    while(i &lt; lensub)<br>    {<br>        if(k == -1 || sub[i-1] == sub[k])<br>        {<br>            next[i] = k+1;<br>            i++;<br>            k = k+1;<br>        }<br>        else<br>        {<br>            k  = next[k];<br>        }<br>    }<br>}<br>算法实现<br>int Kmp(const char *str,const char *sub,int pos)<br>{<br>    int i = pos;<br>    int j = 0;<br>    int lens = strlen(str);<br>    int lensub = strlen(sub);<br>    int *next = (int *)malloc(sizeof(int) * lensub);<br>    assert(next != NULL);<br>    GetNext(next,sub);<br>    while(j &lt; lensub &amp;&amp; i &lt; lens)<br>    {<br>        if(j == -1 || str[i] == sub[j])<br>        {<br>            i++;<br>            j++;<br>        }<br>        else<br>        {<br>            j = next[j];<br>        }<br>    }<br>    if(j &gt;= lensub)<br>    {<br>        return i-j;<br>    }<br>    else<br>    {<br>        return -1;<br>    }<br>}</p><hr><h1 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h1><p>题目描述<br>首先输入一行字符串，然会在输入一行子串，输出对应的next数组与子串首位在原字符串的位置</p><p>样例输入<br>sdryteygdgdyhusjk<br>eygdg</p><p>样例输出<br>next:-1 0 0 0 0<br>5<br>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">typedef struct seqstring &#123;</span><br><span class="line">char string[100];</span><br><span class="line">int length;</span><br><span class="line">&#125;seqstring;</span><br><span class="line">void getnext(seqstring p, int next[]) &#123;</span><br><span class="line">int i, j;</span><br><span class="line">i &#x3D; 0;&#x2F;&#x2F;指向字符串每个字符的下标</span><br><span class="line">j &#x3D; -1;</span><br><span class="line">next[i] &#x3D; j;&#x2F;&#x2F;next[0]放上-1 </span><br><span class="line">while (i &lt; p.length) &#123;&#x2F;&#x2F;没有到达结尾的话 </span><br><span class="line">if (j &#x3D;&#x3D; -1 || p.string[i] &#x3D;&#x3D; p.string[j]) &#123;&#x2F;&#x2F;如果是第一个字符或遇到相同的字符</span><br><span class="line">next[++i] &#x3D; ++j;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">j &#x3D; next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (i &#x3D; 0;i &lt; p.length;i++) &#123;&#x2F;&#x2F;输出next[]值 </span><br><span class="line">printf(&quot;%d &quot;, next[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">int kmp(seqstring t, seqstring p, int next[]) &#123;</span><br><span class="line">int i, j;</span><br><span class="line">i &#x3D; j &#x3D; 0;</span><br><span class="line">while (i &lt; t.length &amp;&amp; j &lt; p.length) &#123;</span><br><span class="line">if (j &#x3D;&#x3D; -1 || t.string[i] &#x3D;&#x3D; p.string[j]) &#123;</span><br><span class="line">i++;j++;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">j &#x3D; next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (j &#x3D;&#x3D; p.length) return i - p.length;</span><br><span class="line">else return -1;</span><br><span class="line">&#125;</span><br><span class="line">int  main() &#123;</span><br><span class="line">seqstring t, p;</span><br><span class="line">int next[50];</span><br><span class="line">scanf(&quot;%s&quot;, t.string);</span><br><span class="line">t.length &#x3D; strlen(t.string);</span><br><span class="line">scanf(&quot;%s&quot;, p.string);</span><br><span class="line">p.length &#x3D; strlen(p.string);</span><br><span class="line">printf(&quot;next:&quot;);</span><br><span class="line">getnext(p, next);</span><br><span class="line">printf(&quot;\n%d\n&quot;, kmp(t, p, next));</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模式匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BF</title>
      <link href="2021/04/16/BF/"/>
      <url>2021/04/16/BF/</url>
      
        <content type="html"><![CDATA[<h1 id="一、BF算法"><a href="#一、BF算法" class="headerlink" title="一、BF算法"></a>一、BF算法</h1><p>暴力匹配(BF)算法是普通的模式匹配算法，BF算法的思想就是将目标串S的第一个字符与模式串T的第一个字符<br>与模式串的T的第一个字符进行匹配，若相等，则继续比较S的第二个和T的第二个字符；若不等，则继续比较S</p><p>的第二个字符和T的第一个字符，依次比较，直到得到最后的匹配结果。</p><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><p>下标从0开始匹配<br>int BF(const char *str,const char *sub,int pos)<br>{<br>    assert(str!=NULL&amp;&amp;sub!=NULL);<br>    int i=pos;//用i来记录S中字符的位置<br>    int j=0;//用j来记录T中字符的位置<br>    int lens=strlen(str);<br>    int lensub=strlen(sub);<br>    //当S不为空并且T不为空时，逐个进行字符的比较<br>    while(j&lt;lensub&amp;&amp;i&lt;lens)<br>    {<br>        if(str[i]==sub[i])<br>        //当S中第i个字符与T中第j个字符相等时，i向后移一个，j向后移一个<br>        {<br>            i++;<br>            j++;<br>        }<br>        else<br>        //当S中第i个字符与T中第i个字符不相等时，i回到前一个位置的下一个位置，j回到0号位置<br>        {<br>            i=i-j+1;<br>            j=0;<br>        }<br>    }<br>    if(j&gt;=lensub)   //当j走完T的长度时，也就说明T在S中匹配成功<br>    {<br>        return i-j;     //此时返回字串在主串中的下标位置，此时i在该返回下标位置+j的长度位置，所以返回i-j。<br>    }<br>    else return -1;  //匹配失败，则返回-1，因为-1下标不存在，不能返回0下标<br>}<br>下标从任意位置开始匹配<br>int BF(SString S,SString T,int pos)<br>{<br>  int i,j;<br>  i=pos;<br>  j=1;<br>  while(i&lt;=S.lenth&amp;&amp;j&lt;=T.lenth) //当检索位置i,j同时小于主串与子串长度时，执行循环<br>   {<br>    if(S.ch[i-1]==T.ch[i-1])<br>     {<br>      i++;<br>      j++;<br>     }<br>    else<br>    {<br>    i=i-j+2;<br>    j=1;<br>    }<br>if(j&gt;T.lenth)<br>   return i-T.lenth; //j&gt;T.lenth匹配成功<br>else<br>    return 0;  //否则匹配失败<br>}</p><hr><h1 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h1><p>题目描述<br>首先输入一行字符串，然会在输入一行子串，输出子串首位在原串的位置</p><p>样例输入<br>adsffgshgh<br>ffgsh<br>样例输出<br>4</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt; </span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#define MAXSIZE 100</span><br><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line"> char ch[MAXSIZE+1];</span><br><span class="line"> int length;</span><br><span class="line">&#125;SString;           &#x2F;&#x2F;定义串结构 </span><br><span class="line">int Index_BF(SString S,SString T,int pos);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int pos &#x3D; 1,pos_i;</span><br><span class="line"> SString S,T;</span><br><span class="line"> gets(S.ch);</span><br><span class="line"> S.length &#x3D; strlen(S.ch); </span><br><span class="line"> gets(T.ch);</span><br><span class="line"> T.length &#x3D; strlen(T.ch);</span><br><span class="line"> pos_i &#x3D; Index_BF(S,T,pos);      &#x2F;&#x2F;调用函数获得第一次匹配到的位置 </span><br><span class="line"> printf(&quot;%d&quot;,pos_i);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br><span class="line">int Index_BF(SString S,SString T,int pos)</span><br><span class="line">&#123;</span><br><span class="line"> int i,j;</span><br><span class="line"> i &#x3D; pos;</span><br><span class="line"> j &#x3D; 1;</span><br><span class="line"> while(i&lt;&#x3D;S.length &amp;&amp; j&lt;&#x3D;T.length)    &#x2F;&#x2F;当检索位置i,j同时小于主串与子串长度时，执行循环 </span><br><span class="line"> &#123;</span><br><span class="line">  if(S.ch[i-1] &#x3D;&#x3D; T.ch[j-1])</span><br><span class="line">  &#123;</span><br><span class="line">   i++;</span><br><span class="line">   j++;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">   i &#x3D; i-j+2;       &#x2F;&#x2F;匹配不成功，主串回溯到i-j+2,比较后继字符 </span><br><span class="line">   j &#x3D; 1;         &#x2F;&#x2F;匹配不成功，子串回溯到j &#x3D; 1 </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br><span class="line"> if(j&gt;T.length)</span><br><span class="line">  return i-T.length;      &#x2F;&#x2F;j&gt;T.length匹配成功 </span><br><span class="line"> else</span><br><span class="line">  return 0;        &#x2F;&#x2F;否则，匹配失败 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS</title>
      <link href="2021/04/16/DFS/"/>
      <url>2021/04/16/DFS/</url>
      
        <content type="html"><![CDATA[<h1 id="一、DFS算法定义"><a href="#一、DFS算法定义" class="headerlink" title="一、DFS算法定义"></a>一、DFS算法定义</h1><p>深度优先搜索算法，又称DFS。DFS算法是一种搜索算法，此算法在运用时就是找一个头结点，然后沿着这个<br>头结点一直找下去，直到找到最后一个满足条件的分节点，然后再寻找另一条路径，当沿着一条路走不满足条<br>件时会自动跳入上一层节点进行判断。DFS算法是递归算法的一种。</p><hr><h1 id="二、DFS算法具体实现"><a href="#二、DFS算法具体实现" class="headerlink" title="二、DFS算法具体实现"></a>二、DFS算法具体实现</h1><p>void DFS(type n){<br>         if(符合条件){cout&lt;&lt;答案;return;}<br>         if(可以剪枝) return;<br>         for(i:1~p){<br>               选择可行决策;<br>               标记已访问该点;<br>               DFS(n+1);<br>               (还原访问现场;)<br>       }<br>}</p><p>int check(参数)<br>{<br>    if(满足条件)<br>        return 1;<br>    return 0;<br>}</p><p>void dfs(int step)<br>{<br>        判断边界<br>        {<br>            相应操作<br>        }<br>        尝试每一种可能<br>        {<br>               满足check条件<br>               标记<br>               继续下一步dfs(step+1)<br>               恢复初始状态（回溯的时候要用到）<br>        }<br>}   </p><hr><h1 id="三、剪枝"><a href="#三、剪枝" class="headerlink" title="三、剪枝"></a>三、剪枝</h1><p>1.顺序性剪枝<br>若一些题的搜索顺序对答案无影响，那么搜索顺序的不同会导致搜索树形态的改变，优先搜索分支较少的阶段，<br>此时能减少搜索的规模。<br>2.重复性剪枝<br>在搜索的时候如果有多种方式可以达到一个状态，那么我们只需要搜索一个分支足矣<br>3.可行性剪枝<br>可行性剪枝是对搜索正确性的一个保证，当分支在递归边界的时候回溯。<br>4.最优性剪枝<br>在搜索过程中，如果当前阶段的代价已经超过我们已知的最小代价，那么此时继续搜索下去没有意义。<br>5.记忆化剪枝<br>记忆搜索状态的结果，当重复遍历一个状态的时候就可以直接返回这个状态的答案，避免重复的搜索。</p><hr><h1 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h1><p>1.全排列问题<br>题目描述<br>对输入的多个数进行全排列</p><p>样例输入<br>1 2 3</p><p>样例输出<br>1<br>12<br>21<br>123<br>132<br>213<br>231<br>312<br>321</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">int book[10] &#x3D; &#123;0&#125;;</span><br><span class="line">int a[10];</span><br><span class="line">void dfs(int index)</span><br><span class="line">&#123;</span><br><span class="line">if(index &#x3D;&#x3D; n)  &#x2F;&#x2F;递归终止条件</span><br><span class="line">&#123;</span><br><span class="line">for(int i &#x3D; 0;i &lt; n;++i)</span><br><span class="line">    cout &lt;&lt; a[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">for(int i &#x3D; 1;i &lt;&#x3D; n;++i)</span><br><span class="line">&#123;</span><br><span class="line">if(!book[i])</span><br><span class="line">&#123;</span><br><span class="line">book[i] &#x3D; 1;&#x2F;&#x2F;标记位</span><br><span class="line">a[index] &#x3D; i;&#x2F;&#x2F;把符合的数字保存到数组中</span><br><span class="line">dfs(index+1);</span><br><span class="line">a[index] &#x3D; 0;</span><br><span class="line">book[i] &#x3D; 0;&#x2F;&#x2F;还原标记，以便回溯</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i &#x3D; 0;i &lt; 9;++i)</span><br><span class="line">    book[i] &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">while(cin &gt;&gt; n)</span><br><span class="line">&#123;</span><br><span class="line">dfs(0);</span><br><span class="line">init();</span><br><span class="line">&#125;  </span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><hr><p>2.八皇后问题<br>题目描述<br>在国际象棋中，皇后是最厉害的棋子，可以横走、直走，还可以斜走。棋手马克斯·贝瑟尔 1848 年提出著名的八皇后问题：<br>即在 8 × 8 的棋盘上摆放八个皇后，使其不能互相攻击 —— 即任意两个皇后都不能处于同一行、同一列或同一条斜线上。<br>现在我们把棋盘扩展到 n×n 的棋盘上摆放 n 个皇后，请问该怎么摆？<br>请编写程序，输入正整数 n，输出全部摆法（棋盘格子空白处显示句点“.”，皇后处显示字母“Q”，每两个字符之间空一格）。</p><p>输入格式<br>正整数 n(n&gt;0)</p><p>输出格式<br>若问题有解，则输出全部摆法（每两种摆法之间空一行）。<br>若问题无解，则输出 None。<br>要求：试探的顺序按从上到下逐行进行，其中每一行按从左到右的逐格进行</p><p>样例输入1<br>3<br>样例输出1<br>none</p><p>样例输入2<br>6<br>样例输出2<br>. Q . . . .<br>. . . Q . .<br>. . . . . Q<br>Q . . . . .<br>. . Q . . .<br>. . . . Q .</p><p>. . Q . . .<br>. . . . . Q<br>. Q . . . .<br>. . . . Q .<br>Q . . . . .<br>. . . Q . .</p><p>. . . Q . .<br>Q . . . . .<br>. . . . Q .<br>. Q . . . .<br>. . . . . Q<br>. . Q . . .</p><p>. . . . Q .<br>. . Q . . .<br>Q . . . . .<br>. . . . . Q<br>. . . Q . .<br>. Q . . . .</p><p>代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int  N&#x3D;20;</span><br><span class="line">char    ch[N][N];&#x2F;&#x2F;用一个二维数组来存储皇后放置的位置</span><br><span class="line">bool   col[N],l[N&lt;&lt;1],r[N&lt;&lt;1];&#x2F;&#x2F;为了数组不会越界，就把N乘2了,涉及位运算了</span><br><span class="line">bool mark;&#x2F;&#x2F;设置一个变量，判断是否有解（有解输出排法，无解输出None）</span><br><span class="line">int  n;</span><br><span class="line">&#x2F;&#x2F;这个dfs是按行逐渐进行下去的，初始值为0行</span><br><span class="line">void dfs(int x)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;如果x能够来到从初始值0来到n的位置就说明有一个解已经产生</span><br><span class="line">   if(x&#x3D;&#x3D;n)&#123;</span><br><span class="line">&#x2F;*</span><br><span class="line">加这个判断实属必要，当第一个解产生的时候，此时mark还是初始值false(0),</span><br><span class="line">所以把mark进入判断的第二个作用域，赋值为true(1),如果还有第二个解，</span><br><span class="line">此时的mark已经为true，所以输出换行，看到这里是不是有些明白了，对，没错！</span><br><span class="line">这个判断就是为了“解”与“解”之间能有个换行符而存在的！</span><br><span class="line">*&#x2F;</span><br><span class="line">       if(mark)</span><br><span class="line">       &#123;</span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">       &#125;</span><br><span class="line">       else</span><br><span class="line">       &#123;</span><br><span class="line">       mark&#x3D;1;</span><br><span class="line">       &#125;</span><br><span class="line">&#x2F;&#x2F;下面就是遍历这个“解”了</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">   for(int j&#x3D;0;j&lt;n;j++)</span><br><span class="line">   &#123;</span><br><span class="line">    cout&lt;&lt;ch[i][j];</span><br><span class="line">     if(j!&#x3D;n-1)</span><br><span class="line">     &#123;</span><br><span class="line">       cout&lt;&lt;&#39; &#39;;&#x2F;&#x2F;处理字符与字符之间的空格</span><br><span class="line">     &#125;    </span><br><span class="line">   &#125;</span><br><span class="line">  putchar(10);&#x2F;&#x2F;输出一行后需要换行，换行的ASCII数为10</span><br><span class="line"> &#125;</span><br><span class="line">return;</span><br><span class="line">       &#125;&#x2F;&#x2F;当这个“解”遍历完的时候，可以安排它消亡了</span><br><span class="line">         &#x2F;&#x2F;下面代码是这个题的核心，请务必！务必！务必！要不择一切手段也要弄懂</span><br><span class="line">&#x2F;*</span><br><span class="line">要明白下面的for循环的意思，记住是x代表行数，下面的i代表的是x行i列,</span><br><span class="line">如果不明白，请反复看，已经是保姆式教学了，</span><br><span class="line">*&#x2F;</span><br><span class="line">  for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line"> &#123; </span><br><span class="line">&#x2F;&#x2F;下面的判断是核心中核心:</span><br><span class="line">&#x2F;&#x2F;第一个判断col[i]是判断i列能不能放，col[i]&#x3D;1,说明不能放（因为下面的判断是！col[i]）</span><br><span class="line">&#x2F;&#x2F;第二个判断l[x+i]是判断主对角线能不能放，</span><br><span class="line">&#x2F;&#x2F;第三个判断r[n-x+i]是判断副对角线能不能放，</span><br><span class="line">&#x2F;&#x2F;第二第三个如果不能理解，建议直接强记模板！</span><br><span class="line">     if(!col[i]&amp;&amp;!l[x+i]&amp;&amp;!r[n-x+i])</span><br><span class="line">    &#123;</span><br><span class="line">    col[i]&#x3D;l[x+i]&#x3D;r[n-x+i]&#x3D;1;&#x2F;&#x2F;如果能放，对状态进行标记</span><br><span class="line">    ch[x][i]&#x3D;&#39;Q&#39;;</span><br><span class="line">    dfs(x+1);&#x2F;&#x2F;第一行结束，对下一行进行判断,都x+1了，你说是不是下一行</span><br><span class="line">&#x2F;&#x2F;对该坐标进行归“零”处理</span><br><span class="line">     ch[x][i]&#x3D;&#39;.&#39;;</span><br><span class="line">    col[i]&#x3D;l[x+i]&#x3D;r[n-x+i]&#x3D;0;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;这个就是对数组进行初始化处理，如果不知道的建议搜memset()详解</span><br><span class="line">memset(ch,&#39;.&#39;,sizeof(ch));&#x2F;&#x2F;初始化地图数组,这个函数在cstring这个头文件下面</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">dfs(0);&#x2F;&#x2F;这个就没得说了，从第一行开始遍历，0就是第一行。</span><br><span class="line">&#x2F;&#x2F;无解就输出None咯！</span><br><span class="line">if(!mark)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;&quot;None&quot;;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深搜 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序</title>
      <link href="2021/04/14/%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/14/%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>题目描述<br>对输入的n个数进行从小到大排序</p><p>样例输入<br>5<br>1 3 2 5 4<br>样例输出<br>1 2 3 4 5</p><hr><h2 id="冒泡排序法"><a href="#冒泡排序法" class="headerlink" title="冒泡排序法"></a>冒泡排序法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,n,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>-j;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i]&gt;a[i+<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">     t=a[i];</span><br><span class="line">     a[i]=a[i+<span class="number">1</span>];</span><br><span class="line">     a[i+<span class="number">1</span>]=t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>注：如果想要降序，只需将a[i]&gt;a[i+1]改为a[i]&lt;a[i+1]即可</p><h2 id="选择排序法"><a href="#选择排序法" class="headerlink" title="选择排序法"></a>选择排序法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,k,n,t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=i;j&lt;n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">    &#123;</span><br><span class="line">t=a[i];</span><br><span class="line">a[i]=a[j];</span><br><span class="line">a[j]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>注：如果想降序，只需将a[i]&gt;a[j]修改为a[i]&lt;a[j]即可</p><h2 id="插入排序法"><a href="#插入排序法" class="headerlink" title="插入排序法"></a>插入排序法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j,a[<span class="number">10</span>],t,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125; <span class="comment">//假定第0个元素是有序表，从第一个元素开始往有序表插入数据 </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">     t=a[i];</span><br><span class="line">     <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>&amp;&amp;a[j]&gt;t;j--)&#123;</span><br><span class="line">     a[j+<span class="number">1</span>]=a[j];<span class="comment">//往前移 </span></span><br><span class="line"> &#125;</span><br><span class="line"> a[j+<span class="number">1</span>]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>注：如果想要降序，只需将a[j]&gt;t修改为a[j]&lt;t即可</p><h2 id="希尔排序法"><a href="#希尔排序法" class="headerlink" title="希尔排序法"></a>希尔排序法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> i,j,k,n,tmp,gap;<span class="comment">//gap为步长 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(gap=n/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;<span class="comment">//步长初始化为数组长度的一半，每次遍历后步长减半 </span></span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;gap;++i)&#123;<span class="comment">//变量i为每次分组的第一个元素下标</span></span><br><span class="line">    <span class="keyword">for</span>(j=i+gap;j&lt;n;j+=gap)&#123;<span class="comment">//对步长为gap的元素进行直插排序，当 gap为1时，就是直插排序 </span></span><br><span class="line">         tmp=a[j];<span class="comment">//备份a[i]的值</span></span><br><span class="line"> k=j-gap;<span class="comment">//j初始化为i的前一个元素(与i相差gap长度) </span></span><br><span class="line"> <span class="keyword">while</span>(k&gt;=<span class="number">0</span>&amp;&amp;a[k]&gt;tmp)&#123;</span><br><span class="line"> a[k+gap]=a[k];<span class="comment">//将在a[i]前且比tmp的值大的元素向后移动一位 </span></span><br><span class="line"> k-=gap;</span><br><span class="line"> &#125;</span><br><span class="line"> a[k+gap]=tmp;</span><br><span class="line">      &#125;   </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：如果想要降序，只需将a[k]&gt;tmp修改为a[k]&lt;tmp即可</p><h2 id="快速排序法"><a href="#快速排序法" class="headerlink" title="快速排序法"></a>快速排序法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = high;</span><br><span class="line">        <span class="keyword">int</span> k = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[j] &gt;= k)     <span class="comment">// 从右向左找第一个小于k的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i++] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; arr[i] &lt; k)      <span class="comment">// 从左向右找第一个大于等于k的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = k;  <span class="comment">// 递归调用</span></span><br><span class="line">        QuickSort(arr, low, i - <span class="number">1</span>);     <span class="comment">// 排序k左边</span></span><br><span class="line">        QuickSort(arr, i + <span class="number">1</span>, high);    <span class="comment">// 排序k右边</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>],i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    QuickSort(a, <span class="number">0</span>, n<span class="number">-1</span>);  <span class="comment">// 快速排序</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：如果想要降序，只需将arr[j]&gt;=k改为arr[j]&lt;k与arr[i]&lt;k改为arr[i]&gt;=k即可</p><h2 id="堆排序算法"><a href="#堆排序算法" class="headerlink" title="堆排序算法"></a>堆排序算法</h2><p>代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span><span class="comment">//该函数用于交换两个变量的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> H[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span><span class="comment">//堆调整，将start和end之间的元素调整为最大堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=H[start];</span><br><span class="line">    <span class="keyword">int</span> parent=start,child;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*parent&lt;=end)</span><br><span class="line">    &#123;</span><br><span class="line">        child=<span class="number">2</span>*parent;</span><br><span class="line">        <span class="keyword">if</span>(child!=end&amp;&amp;H[child]&lt;H[child+<span class="number">1</span>])++child;</span><br><span class="line">        <span class="keyword">if</span>(temp&gt;H[child])<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> H[parent]=H[child];</span><br><span class="line">        parent=child;</span><br><span class="line">    &#125;</span><br><span class="line">    H[parent]=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> H[],<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(R-L+<span class="number">1</span>)/<span class="number">2</span>;i&gt;=L;--i)<span class="comment">//调整整个二叉树为最大堆</span></span><br><span class="line">        HeapAdjust(H,i,R);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=L;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(&amp;H[L],&amp;H[i]);</span><br><span class="line">        HeapAdjust(H,L,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,a[<span class="number">100</span>]; </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    HeapSort(a,<span class="number">1</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="2021/04/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>2021/04/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>代码：<br>#include&lt;stdio.h&gt;<br>int main()<br>{<br>printf(“hello world”)<br>return 0;<br>}</p><hr><h2 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h2><p>代码：<br>#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>int main()<br>{<br>cout&lt;&lt;”hello world”;<br>return 0;<br>}</p><hr><h2 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h2><p>代码：<br>public class helloworld{<br>      public static void main(String args[]{<br>             System.out.println(“hello world”);<br>    }<br>}</p><hr><h2 id="PYTHON"><a href="#PYTHON" class="headerlink" title="PYTHON"></a>PYTHON</h2><p>代码：<br>print(“hello world”)</p><hr>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
